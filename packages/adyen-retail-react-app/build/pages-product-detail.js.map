{"version":3,"file":"pages-product-detail.js","mappings":"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","sources":["webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-detail/partials/information-accordion.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-detail/index.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    Accordion,\n    AccordionItem,\n    AccordionButton,\n    AccordionPanel,\n    AccordionIcon,\n    Box,\n    Stack\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {useIntl} from 'react-intl'\n\nconst InformationAccordion = ({product}) => {\n    const {formatMessage} = useIntl()\n\n    return (\n        <Stack direction=\"row\" spacing={[0, 0, 0, 16]}>\n            <Accordion allowMultiple maxWidth={'896px'} flex={[1, 1, 1, 5]}>\n                {/* Details */}\n                <AccordionItem>\n                    <h2>\n                        <AccordionButton height=\"64px\">\n                            <Box flex=\"1\" textAlign=\"left\" fontWeight=\"bold\" fontSize=\"lg\">\n                                {formatMessage({\n                                    defaultMessage: 'Product Detail',\n                                    id: 'product_detail.accordion.button.product_detail'\n                                })}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                    </h2>\n                    <AccordionPanel mb={6} mt={4}>\n                        <div\n                            dangerouslySetInnerHTML={{\n                                __html: product?.longDescription\n                            }}\n                        />\n                    </AccordionPanel>\n                </AccordionItem>\n\n                {/* Size & Fit */}\n                <AccordionItem>\n                    <h2>\n                        <AccordionButton height=\"64px\">\n                            <Box flex=\"1\" textAlign=\"left\" fontWeight=\"bold\" fontSize=\"lg\">\n                                {formatMessage({\n                                    defaultMessage: 'Size & Fit',\n                                    id: 'product_detail.accordion.button.size_fit'\n                                })}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                    </h2>\n                    <AccordionPanel mb={6} mt={4}>\n                        {formatMessage({\n                            defaultMessage: 'Coming Soon',\n                            id: 'product_detail.accordion.message.coming_soon'\n                        })}\n                    </AccordionPanel>\n                </AccordionItem>\n\n                {/* Reviews */}\n                <AccordionItem>\n                    <h2>\n                        <AccordionButton height=\"64px\">\n                            <Box flex=\"1\" textAlign=\"left\" fontWeight=\"bold\" fontSize=\"lg\">\n                                {formatMessage({\n                                    defaultMessage: 'Reviews',\n                                    id: 'product_detail.accordion.button.reviews'\n                                })}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                    </h2>\n                    <AccordionPanel mb={6} mt={4}>\n                        {formatMessage({\n                            defaultMessage: 'Coming Soon',\n                            id: 'product_detail.accordion.message.coming_soon'\n                        })}\n                    </AccordionPanel>\n                </AccordionItem>\n\n                {/* Questions */}\n                <AccordionItem>\n                    <h2>\n                        <AccordionButton height=\"64px\">\n                            <Box flex=\"1\" textAlign=\"left\" fontWeight=\"bold\" fontSize=\"lg\">\n                                {formatMessage({\n                                    defaultMessage: 'Questions',\n                                    id: 'product_detail.accordion.button.questions'\n                                })}\n                            </Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                    </h2>\n                    <AccordionPanel mb={6} mt={4}>\n                        {formatMessage({\n                            defaultMessage: 'Coming Soon',\n                            id: 'product_detail.accordion.message.coming_soon'\n                        })}\n                    </AccordionPanel>\n                </AccordionItem>\n            </Accordion>\n            <Box display={['none', 'none', 'none', 'block']} flex={4}></Box>\n        </Stack>\n    )\n}\n\nInformationAccordion.propTypes = {\n    product: PropTypes.object\n}\n\nexport default InformationAccordion\n","/*\n * Copyright (c) 2022, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {Fragment, useCallback, useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {Helmet} from 'react-helmet'\nimport {FormattedMessage, useIntl} from 'react-intl'\n\n// Components\nimport {Box, Button, Stack} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {\n    useProduct,\n    useCategory,\n    useShopperBasketsMutation,\n    useShopperCustomersMutation,\n    useCustomerId\n} from '@salesforce/commerce-sdk-react'\n\n// Hooks\nimport {useCurrentBasket} from '@salesforce/retail-react-app/app/hooks/use-current-basket'\nimport {useVariant} from '@salesforce/retail-react-app/app/hooks'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport useEinstein from '@salesforce/retail-react-app/app/hooks/use-einstein'\nimport {useServerContext} from '@salesforce/pwa-kit-react-sdk/ssr/universal/hooks'\n// Project Components\nimport RecommendedProducts from '@salesforce/retail-react-app/app/components/recommended-products'\nimport ProductView from '@salesforce/retail-react-app/app/components/product-view'\nimport InformationAccordion from '@salesforce/retail-react-app/app/pages/product-detail/partials/information-accordion'\n\n// constant\nimport {\n    API_ERROR_MESSAGE,\n    EINSTEIN_RECOMMENDERS,\n    MAX_CACHE_AGE,\n    TOAST_ACTION_VIEW_WISHLIST,\n    TOAST_MESSAGE_ADDED_TO_WISHLIST\n} from '@salesforce/retail-react-app/app/constants'\nimport {rebuildPathWithParams} from '@salesforce/retail-react-app/app/utils/url'\nimport {useHistory, useLocation, useParams} from 'react-router-dom'\nimport {useToast} from '@salesforce/retail-react-app/app/hooks/use-toast'\nimport {useWishList} from '@salesforce/retail-react-app/app/hooks/use-wish-list'\n\nconst ProductDetail = () => {\n    const {formatMessage} = useIntl()\n    const history = useHistory()\n    const location = useLocation()\n    const einstein = useEinstein()\n    const toast = useToast()\n    const navigate = useNavigation()\n    const [productSetSelection, setProductSetSelection] = useState({})\n    const childProductRefs = React.useRef({})\n    const customerId = useCustomerId()\n    /****************************** Basket *********************************/\n    const {data: basket} = useCurrentBasket()\n    const addItemToBasketMutation = useShopperBasketsMutation('addItemToBasket')\n    const {res} = useServerContext()\n    if (res) {\n        res.set('Cache-Control', `max-age=${MAX_CACHE_AGE}`)\n    }\n    const isBasketLoading = !basket?.basketId\n\n    /*************************** Product Detail and Category ********************/\n    const {productId} = useParams()\n    const urlParams = new URLSearchParams(location.search)\n    const {data: product, isLoading: isProductLoading} = useProduct(\n        {\n            parameters: {\n                id: urlParams.get('pid') || productId,\n                allImages: true\n            }\n        },\n        {\n            // When shoppers select a different variant (and the app fetches the new data),\n            // the old data is still rendered (and not the skeletons).\n            keepPreviousData: true\n        }\n    )\n    const isProductASet = product?.type.set\n    // Note: Since category needs id from product detail, it can't be server side rendered atm\n    // until we can do dependent query on server\n    const {data: category} = useCategory({\n        parameters: {\n            id: product?.primaryCategoryId,\n            level: 1\n        }\n    })\n    const [primaryCategory, setPrimaryCategory] = useState(category)\n    const variant = useVariant(product)\n    // This page uses the `primaryCategoryId` to retrieve the category data. This attribute\n    // is only available on `master` products. Since a variation will be loaded once all the\n    // attributes are selected (to get the correct inventory values), the category information\n    // is overridden. This will allow us to keep the initial category around until a different\n    // master product is loaded.\n    useEffect(() => {\n        if (category) {\n            setPrimaryCategory(category)\n        }\n    }, [category])\n\n    /**************** Product Variant ****************/\n    useEffect(() => {\n        if (!variant) {\n            return\n        }\n        // update the variation attributes parameter on\n        // the url accordingly as the variant changes\n        const updatedUrl = rebuildPathWithParams(`${location.pathname}${location.search}`, {\n            pid: variant?.productId\n        })\n        history.replace(updatedUrl)\n    }, [variant])\n\n    /**************** Wishlist ****************/\n    const {data: wishlist, isLoading: isWishlistLoading} = useWishList()\n    const createCustomerProductListItem = useShopperCustomersMutation(\n        'createCustomerProductListItem'\n    )\n\n    const handleAddToWishlist = (product, variant, quantity) => {\n        createCustomerProductListItem.mutate(\n            {\n                parameters: {\n                    listId: wishlist.id,\n                    customerId\n                },\n                body: {\n                    // NOTE: APi does not respect quantity, it always adds 1\n                    quantity,\n                    productId: variant?.productId || product?.id,\n                    public: false,\n                    priority: 1,\n                    type: 'product'\n                }\n            },\n            {\n                onSuccess: () => {\n                    toast({\n                        title: formatMessage(TOAST_MESSAGE_ADDED_TO_WISHLIST, {quantity: 1}),\n                        status: 'success',\n                        action: (\n                            // it would be better if we could use <Button as={Link}>\n                            // but unfortunately the Link component is not compatible\n                            // with Chakra Toast, since the ToastManager is rendered via portal\n                            // and the toast doesn't have access to intl provider, which is a\n                            // requirement of the Link component.\n                            <Button variant=\"link\" onClick={() => navigate('/account/wishlist')}>\n                                {formatMessage(TOAST_ACTION_VIEW_WISHLIST)}\n                            </Button>\n                        )\n                    })\n                },\n                onError: () => {\n                    showError()\n                }\n            }\n        )\n    }\n\n    /**************** Add To Cart ****************/\n    const showToast = useToast()\n    const showError = () => {\n        showToast({\n            title: formatMessage(API_ERROR_MESSAGE),\n            status: 'error'\n        })\n    }\n\n    const handleAddToCart = async (productSelectionValues) => {\n        try {\n            const productItems = productSelectionValues.map(({variant, quantity}) => ({\n                productId: variant.productId,\n                price: variant.price,\n                quantity\n            }))\n\n            await addItemToBasketMutation.mutateAsync({\n                parameters: {basketId: basket.basketId},\n                body: productItems\n            })\n\n            einstein.sendAddToCart(productItems)\n\n            // If the items were successfully added, set the return value to be used\n            // by the add to cart modal.\n            return productSelectionValues\n        } catch (error) {\n            showError(error)\n        }\n    }\n\n    /**************** Product Set Handlers ****************/\n    const handleProductSetValidation = useCallback(() => {\n        // Run validation for all child products. This will ensure the error\n        // messages are shown.\n        Object.values(childProductRefs.current).forEach(({validateOrderability}) => {\n            validateOrderability({scrollErrorIntoView: false})\n        })\n\n        // Using ot state for which child products are selected, scroll to the first\n        // one that isn't selected.\n        const selectedProductIds = Object.keys(productSetSelection)\n        const firstUnselectedProduct = product.setProducts.find(\n            ({id}) => !selectedProductIds.includes(id)\n        )\n\n        if (firstUnselectedProduct) {\n            // Get the reference to the product view and scroll to it.\n            const {ref} = childProductRefs.current[firstUnselectedProduct.id]\n\n            if (ref.scrollIntoView) {\n                ref.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'end'\n                })\n            }\n\n            return false\n        }\n\n        return true\n    }, [product, productSetSelection])\n\n    const handleProductSetAddToCart = () => {\n        // Get all the selected products, and pass them to the addToCart handler which\n        // accepts an array.\n        const productSelectionValues = Object.values(productSetSelection)\n        return handleAddToCart(productSelectionValues)\n    }\n\n    /**************** Einstein ****************/\n    useEffect(() => {\n        if (product && product.type.set) {\n            einstein.sendViewProduct(product)\n            const childrenProducts = product.setProducts\n            childrenProducts.map((child) => {\n                einstein.sendViewProduct(child)\n            })\n        } else if (product) {\n            einstein.sendViewProduct(product)\n        }\n    }, [product])\n\n    return (\n        <Box\n            className=\"sf-product-detail-page\"\n            layerStyle=\"page\"\n            data-testid=\"product-details-page\"\n        >\n            <Helmet>\n                <title>{product?.pageTitle}</title>\n                <meta name=\"description\" content={product?.pageDescription} />\n            </Helmet>\n\n            <Stack spacing={16}>\n                {isProductASet ? (\n                    <Fragment>\n                        {/* Product Set: parent product */}\n                        <ProductView\n                            product={product}\n                            category={primaryCategory?.parentCategoryTree || []}\n                            addToCart={handleProductSetAddToCart}\n                            addToWishlist={handleAddToWishlist}\n                            isProductLoading={isProductLoading}\n                            isBasketLoading={isBasketLoading}\n                            isWishlistLoading={isWishlistLoading}\n                            validateOrderability={handleProductSetValidation}\n                        />\n\n                        <hr />\n\n                        {/* TODO: consider `childProduct.belongsToSet` */}\n                        {\n                            // Product Set: render the child products\n                            product.setProducts.map((childProduct) => (\n                                <Box key={childProduct.id} data-testid=\"child-product\">\n                                    <ProductView\n                                        // Do no use an arrow function as we are manipulating the functions scope.\n                                        ref={function (ref) {\n                                            // Assign the \"set\" scope of the ref, this is how we access the internal\n                                            // validation.\n                                            childProductRefs.current[childProduct.id] = {\n                                                ref,\n                                                validateOrderability: this.validateOrderability\n                                            }\n                                        }}\n                                        product={childProduct}\n                                        isProductPartOfSet={true}\n                                        addToCart={(variant, quantity) =>\n                                            handleAddToCart([\n                                                {product: childProduct, variant, quantity}\n                                            ])\n                                        }\n                                        addToWishlist={handleAddToWishlist}\n                                        onVariantSelected={(product, variant, quantity) => {\n                                            if (quantity) {\n                                                setProductSetSelection((previousState) => ({\n                                                    ...previousState,\n                                                    [product.id]: {\n                                                        product,\n                                                        variant,\n                                                        quantity\n                                                    }\n                                                }))\n                                            } else {\n                                                const selections = {...productSetSelection}\n                                                delete selections[product.id]\n                                                setProductSetSelection(selections)\n                                            }\n                                        }}\n                                        isProductLoading={isProductLoading}\n                                        isBasketLoading={isBasketLoading}\n                                        isWishlistLoading={isWishlistLoading}\n                                    />\n                                    <InformationAccordion product={childProduct} />\n\n                                    <Box display={['none', 'none', 'none', 'block']}>\n                                        <hr />\n                                    </Box>\n                                </Box>\n                            ))\n                        }\n                    </Fragment>\n                ) : (\n                    <Fragment>\n                        <ProductView\n                            product={product}\n                            category={primaryCategory?.parentCategoryTree || []}\n                            addToCart={(variant, quantity) =>\n                                handleAddToCart([{product, variant, quantity}])\n                            }\n                            addToWishlist={handleAddToWishlist}\n                            isProductLoading={isProductLoading}\n                            isBasketLoading={isBasketLoading}\n                            isWishlistLoading={isWishlistLoading}\n                        />\n                        <InformationAccordion product={product} />\n                    </Fragment>\n                )}\n\n                {/* Product Recommendations */}\n                <Stack spacing={16}>\n                    {!isProductASet && (\n                        <RecommendedProducts\n                            title={\n                                <FormattedMessage\n                                    defaultMessage=\"Complete the Set\"\n                                    id=\"product_detail.recommended_products.title.complete_set\"\n                                />\n                            }\n                            recommender={EINSTEIN_RECOMMENDERS.PDP_COMPLETE_SET}\n                            products={[product]}\n                            mx={{base: -4, md: -8, lg: 0}}\n                            shouldFetch={() => product?.id}\n                        />\n                    )}\n                    <RecommendedProducts\n                        title={\n                            <FormattedMessage\n                                defaultMessage=\"You might also like\"\n                                id=\"product_detail.recommended_products.title.might_also_like\"\n                            />\n                        }\n                        recommender={EINSTEIN_RECOMMENDERS.PDP_MIGHT_ALSO_LIKE}\n                        products={[product]}\n                        mx={{base: -4, md: -8, lg: 0}}\n                        shouldFetch={() => product?.id}\n                    />\n\n                    <RecommendedProducts\n                        // The Recently Viewed recommender doesn't use `products`, so instead we\n                        // provide a key to update the recommendations on navigation.\n                        key={location.key}\n                        title={\n                            <FormattedMessage\n                                defaultMessage=\"Recently Viewed\"\n                                id=\"product_detail.recommended_products.title.recently_viewed\"\n                            />\n                        }\n                        recommender={EINSTEIN_RECOMMENDERS.PDP_RECENTLY_VIEWED}\n                        mx={{base: -4, md: -8, lg: 0}}\n                    />\n                </Stack>\n            </Stack>\n        </Box>\n    )\n}\n\nProductDetail.getTemplateName = () => 'product-detail'\n\nProductDetail.propTypes = {\n    /**\n     * The current react router match object. (Provided internally)\n     */\n    match: PropTypes.object\n}\n\nexport default ProductDetail\n"],"names":["InformationAccordion","product","formatMessage","useIntl","React","Stack","direction","spacing","Accordion","allowMultiple","maxWidth","flex","AccordionItem","AccordionButton","height","Box","textAlign","fontWeight","fontSize","defaultMessage","id","AccordionIcon","AccordionPanel","mb","mt","dangerouslySetInnerHTML","__html","longDescription","display","propTypes","PropTypes","ProductDetail","history","useHistory","location","useLocation","einstein","useEinstein","toast","useToast","navigate","useNavigation","productSetSelection","setProductSetSelection","useState","childProductRefs","customerId","useCustomerId","data","basket","useCurrentBasket","addItemToBasketMutation","useShopperBasketsMutation","res","useServerContext","set","MAX_CACHE_AGE","isBasketLoading","basketId","productId","useParams","urlParams","URLSearchParams","search","isLoading","isProductLoading","useProduct","parameters","get","allImages","keepPreviousData","isProductASet","type","category","useCategory","primaryCategoryId","level","primaryCategory","setPrimaryCategory","variant","useVariant","useEffect","updatedUrl","rebuildPathWithParams","pathname","pid","replace","wishlist","isWishlistLoading","useWishList","createCustomerProductListItem","useShopperCustomersMutation","handleAddToWishlist","quantity","mutate","listId","body","public","priority","onSuccess","title","TOAST_MESSAGE_ADDED_TO_WISHLIST","status","action","Button","onClick","TOAST_ACTION_VIEW_WISHLIST","onError","showError","showToast","API_ERROR_MESSAGE","handleAddToCart","_ref","_asyncToGenerator","productSelectionValues","productItems","map","price","mutateAsync","sendAddToCart","error","_x","apply","arguments","handleProductSetValidation","useCallback","Object","values","current","forEach","validateOrderability","scrollErrorIntoView","selectedProductIds","keys","firstUnselectedProduct","setProducts","find","includes","ref","scrollIntoView","behavior","block","sendViewProduct","child","className","layerStyle","Helmet","pageTitle","name","content","pageDescription","Fragment","ProductView","parentCategoryTree","addToCart","handleProductSetAddToCart","addToWishlist","childProduct","key","this","isProductPartOfSet","onVariantSelected","previousState","_objectSpread","selections","RecommendedProducts","FormattedMessage","recommender","EINSTEIN_RECOMMENDERS","PDP_COMPLETE_SET","products","mx","base","md","lg","shouldFetch","PDP_MIGHT_ALSO_LIKE","PDP_RECENTLY_VIEWED","getTemplateName","match"],"sourceRoot":""}