{"version":3,"file":"pages-login.js","mappings":"kVA4BA,MAAMA,GAAsBC,EAAAA,EAAAA,eAAc,CACtCC,eAAgB,CAAF,oEACdC,GAAI,oDAEFC,EAAQA,KACV,MAAM,cAACC,IAAiBC,EAAAA,EAAAA,KAClBC,GAAWC,EAAAA,EAAAA,WACXC,GAAOC,EAAAA,EAAAA,MACPC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACX,aAACC,EAAY,aAAEC,IAAgBC,EAAAA,EAAAA,mBAC/BC,GAAQC,EAAAA,EAAAA,eAAcC,EAAAA,YAAYC,wBAElCC,GAAaC,EAAAA,EAAAA,iBACbC,GAAeC,EAAAA,EAAAA,GAAYT,IAC1BU,KAAMC,IAAWC,EAAAA,EAAAA,oBACpB,CAACC,WAAY,CAACP,eACd,CAACQ,UAAWR,IAAeS,EAAAA,GAAUC,kBAAkB,IAErDC,GAAcC,EAAAA,EAAAA,2BAA0B,eAExCC,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,IAAG,UAAOX,GACtB,IAAI,IAAAY,EAAAC,EAAAC,QACMtB,EAAMuB,YAAY,CAACC,SAAUhB,EAAKiB,MAAOC,SAAUlB,EAAKkB,YACxCjB,SAAgB,QAATW,EAAPX,EAASA,eAAO,IAAAW,GAAK,QAALC,EAAhBD,EAAmB,UAAE,IAAAC,GAAc,QAAdC,EAArBD,EAAuBM,oBAAY,IAAAL,OAA5B,EAAPA,EAAqCM,QAAS,GAKR,UAAjBtB,GAEvCS,EAAYc,OAAO,CACfC,QAAS,CAGL,eAAgB,oBAEpBnB,WAAY,CACRoB,yBAAyB,IAIzC,CAAE,MAAOC,GACL,MAAMC,EAAU,gBAAgBC,KAAKF,EAAMC,SACrC9C,EAAcL,GACdK,EAAcgD,EAAAA,mBACpB5C,EAAK6C,SAAS,SAAU,CAACC,KAAM,SAAUJ,WAC7C,CACJ,IAAC,gBA3BeK,GAAA,OAAApB,EAAAqB,MAAA,KAAAC,UAAA,KA4ChB,OAdAC,EAAAA,EAAAA,YAAU,KACY,IAAAC,EAAd7C,IACIJ,SAAe,QAAPiD,EAARjD,EAAUkD,aAAK,IAAAD,GAAfA,EAAiBE,aACjBvD,EAASI,EAASkD,MAAMC,cAExBvD,EAAS,YAEjB,GACD,CAACQ,KAGJ4C,EAAAA,EAAAA,YAAU,KACN9C,EAASkD,aAAapD,EAASqD,SAAS,GACzC,IAECC,EAAAA,cAACC,EAAAA,GAAG,CAAC,cAAY,aAAaC,GAAG,UAAUC,GAAI,CAAC,EAAG,KAC/CH,EAAAA,cAACI,EAAAA,EAAG,CAACC,MAAM,UAAUC,YAAY,qBACjCN,EAAAA,cAACO,EAAAA,EAAS,CACNC,WAAY,GACZC,MAAO,CAAC,OAAQ,SAChBP,GAAG,QACHQ,cAAe,GACfC,UAAW,EACXC,aAAc,EACdC,aAAa,QAEbb,EAAAA,cAACc,EAAAA,EAAS,CACNtE,KAAMA,EACN0B,WAAYA,EACZ6C,mBAAoBA,IAAMzE,EAAS,iBACnC0E,oBAAqBA,IAAM1E,EAAS,sBAG1C,EAIdH,EAAM8E,gBAAkB,IAAM,QAE9B9E,EAAM+E,UAAY,CACdC,MAAOC,IAAAA,QAGX,S","sources":["webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/login/index.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {useIntl, defineMessage} from 'react-intl'\nimport {Box, Container} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {\n    AuthHelpers,\n    useAuthHelper,\n    useCustomerBaskets,\n    useCustomerId,\n    useCustomerType,\n    useShopperBasketsMutation\n} from '@salesforce/commerce-sdk-react'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport Seo from '@salesforce/retail-react-app/app/components/seo'\nimport {useForm} from 'react-hook-form'\nimport {useLocation} from 'react-router-dom'\nimport useEinstein from '@salesforce/retail-react-app/app/hooks/use-einstein'\nimport LoginForm from '@salesforce/retail-react-app/app/components/login'\nimport {API_ERROR_MESSAGE} from '@salesforce/retail-react-app/app/constants'\nimport {usePrevious} from '@salesforce/retail-react-app/app/hooks/use-previous'\nimport {isServer} from '@salesforce/retail-react-app/app/utils/utils'\nconst LOGIN_ERROR_MESSAGE = defineMessage({\n    defaultMessage: 'Incorrect username or password, please try again.',\n    id: 'login_page.error.incorrect_username_or_password'\n})\nconst Login = () => {\n    const {formatMessage} = useIntl()\n    const navigate = useNavigation()\n    const form = useForm()\n    const location = useLocation()\n    const einstein = useEinstein()\n    const {isRegistered, customerType} = useCustomerType()\n    const login = useAuthHelper(AuthHelpers.LoginRegisteredUserB2C)\n\n    const customerId = useCustomerId()\n    const prevAuthType = usePrevious(customerType)\n    const {data: baskets} = useCustomerBaskets(\n        {parameters: {customerId}},\n        {enabled: !!customerId && !isServer, keepPreviousData: true}\n    )\n    const mergeBasket = useShopperBasketsMutation('mergeBasket')\n\n    const submitForm = async (data) => {\n        try {\n            await login.mutateAsync({username: data.email, password: data.password})\n            const hasBasketItem = baskets?.baskets?.[0]?.productItems?.length > 0\n            // we only want to merge basket when the user is logged in as a recurring user\n            // only recurring users trigger the login mutation, new user triggers register mutation\n            // this logic needs to stay in this block because this is the only place that tells if a user is a recurring user\n            // if you change logic here, also change it in login page\n            const shouldMergeBasket = hasBasketItem && prevAuthType === 'guest'\n            if (shouldMergeBasket) {\n                mergeBasket.mutate({\n                    headers: {\n                        // This is not required since the request has no body\n                        // but CommerceAPI throws a '419 - Unsupported Media Type' error if this header is removed.\n                        'Content-Type': 'application/json'\n                    },\n                    parameters: {\n                        createDestinationBasket: true\n                    }\n                })\n            }\n        } catch (error) {\n            const message = /Unauthorized/i.test(error.message)\n                ? formatMessage(LOGIN_ERROR_MESSAGE)\n                : formatMessage(API_ERROR_MESSAGE)\n            form.setError('global', {type: 'manual', message})\n        }\n    }\n\n    // If customer is registered push to account page\n    useEffect(() => {\n        if (isRegistered) {\n            if (location?.state?.directedFrom) {\n                navigate(location.state.directedFrom)\n            } else {\n                navigate('/account')\n            }\n        }\n    }, [isRegistered])\n\n    /**************** Einstein ****************/\n    useEffect(() => {\n        einstein.sendViewPage(location.pathname)\n    }, [])\n    return (\n        <Box data-testid=\"login-page\" bg=\"gray.50\" py={[8, 16]}>\n            <Seo title=\"Sign in\" description=\"Customer sign in\" />\n            <Container\n                paddingTop={16}\n                width={['100%', '407px']}\n                bg=\"white\"\n                paddingBottom={14}\n                marginTop={8}\n                marginBottom={8}\n                borderRadius=\"base\"\n            >\n                <LoginForm\n                    form={form}\n                    submitForm={submitForm}\n                    clickCreateAccount={() => navigate('/registration')}\n                    clickForgotPassword={() => navigate('/reset-password')}\n                />\n            </Container>\n        </Box>\n    )\n}\n\nLogin.getTemplateName = () => 'login'\n\nLogin.propTypes = {\n    match: PropTypes.object\n}\n\nexport default Login\n"],"names":["LOGIN_ERROR_MESSAGE","defineMessage","defaultMessage","id","Login","formatMessage","useIntl","navigate","useNavigation","form","useForm","location","useLocation","einstein","useEinstein","isRegistered","customerType","useCustomerType","login","useAuthHelper","AuthHelpers","LoginRegisteredUserB2C","customerId","useCustomerId","prevAuthType","usePrevious","data","baskets","useCustomerBaskets","parameters","enabled","isServer","keepPreviousData","mergeBasket","useShopperBasketsMutation","submitForm","_ref","_asyncToGenerator","_baskets$baskets","_baskets$baskets$","_baskets$baskets$$pro","mutateAsync","username","email","password","productItems","length","mutate","headers","createDestinationBasket","error","message","test","API_ERROR_MESSAGE","setError","type","_x","apply","arguments","useEffect","_location$state","state","directedFrom","sendViewPage","pathname","React","Box","bg","py","Seo","title","description","Container","paddingTop","width","paddingBottom","marginTop","marginBottom","borderRadius","LoginForm","clickCreateAccount","clickForgotPassword","getTemplateName","propTypes","match","PropTypes"],"sourceRoot":""}