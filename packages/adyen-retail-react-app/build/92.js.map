{"version":3,"file":"92.js","mappings":"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","sources":["webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/breadcrumb/index.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/swatch-group/index.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/swatch-group/swatch.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/image-gallery/index.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/product-view/index.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/quantity-picker/index.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link as RouteLink} from 'react-router-dom'\nimport {useIntl} from 'react-intl'\n\n// Components\nimport {\n    Breadcrumb as ChakraBreadcrumb,\n    BreadcrumbItem as ChakraBreadcrumbItem,\n    BreadcrumbLink as ChakraBreadcrumbLink,\n    // Hooks\n    useStyleConfig\n} from '@salesforce/retail-react-app/app/components/shared/ui'\n\n// Icons\nimport {ChevronRightIcon} from '@salesforce/retail-react-app/app/components/icons'\n\n// Others\nimport {categoryUrlBuilder} from '@salesforce/retail-react-app/app/utils/url'\n\n/**\n * A simplification of the Chakra `Breadcrumb` component for our project needs. Given\n * a list of categories, display a breadcrumb and it's items.\n */\nconst Breadcrumb = ({categories, ...rest}) => {\n    const intl = useIntl()\n    const styles = useStyleConfig('Breadcrumb')\n\n    return (\n        <ChakraBreadcrumb\n            className=\"sf-breadcrumb\"\n            {...styles.container}\n            separator={<ChevronRightIcon {...styles.icon} />}\n            {...rest}\n        >\n            {categories.map((category) => (\n                <ChakraBreadcrumbItem key={category.id} data-testid=\"sf-crumb-item\">\n                    <ChakraBreadcrumbLink\n                        as={RouteLink}\n                        to={categoryUrlBuilder(category, intl.locale)}\n                        {...styles.link}\n                    >\n                        {category.name}\n                    </ChakraBreadcrumbLink>\n                </ChakraBreadcrumbItem>\n            ))}\n        </ChakraBreadcrumb>\n    )\n}\n\nBreadcrumb.displayName = 'Breadcrumb'\n\nBreadcrumb.propTypes = {\n    /**\n     * The categories to be displayed in this breadcrumb.\n     */\n    categories: PropTypes.array\n}\n\nexport default Breadcrumb\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    Flex,\n    Box,\n    HStack,\n    useStyleConfig\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {noop} from '@salesforce/retail-react-app/app/utils/utils'\n\n/**\n * SwatchGroup allows you to create a list of swatches\n * Each Swatch is a link with will direct to a href passed to them\n */\nconst SwatchGroup = (props) => {\n    const {\n        displayName,\n        children,\n        value: selectedValue,\n        label = '',\n        variant = 'square',\n        onChange = noop\n    } = props\n    const styles = useStyleConfig('SwatchGroup')\n    return (\n        <Flex {...styles.swatchGroup} role=\"radiogroup\">\n            <HStack {...styles.swatchLabel}>\n                <Box fontWeight=\"semibold\">{`${label}:`}</Box>\n                <Box>{displayName}</Box>\n            </HStack>\n            <Flex {...styles.swatchesWrapper}>\n                {React.Children.map(children, (child) => {\n                    const childValue = child.props.value\n\n                    return React.cloneElement(child, {\n                        selected: childValue === selectedValue,\n                        variant,\n                        onChange\n                    })\n                })}\n            </Flex>\n        </Flex>\n    )\n}\n\nSwatchGroup.displayName = 'SwatchGroup'\n\nSwatchGroup.propTypes = {\n    /**\n     * The attribute name of the swatch group. E.g color, size\n     */\n    label: PropTypes.string,\n    /**\n     * The selected Swatch value.\n     */\n    value: PropTypes.string,\n    /**\n     * The display value of the selected option\n     */\n    displayName: PropTypes.string,\n    /**\n     * The Swatch options to choose between\n     */\n    children: PropTypes.array,\n    /**\n     * The shape of the swatches\n     */\n    variant: PropTypes.oneOf(['square', 'circle']),\n    /**\n     * This function is called when a new option is selected\n     */\n    onChange: PropTypes.func\n}\n\nexport default SwatchGroup\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    Button,\n    Box,\n    Center,\n    useMultiStyleConfig\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {Link as RouteLink} from 'react-router-dom'\n\n/**\n * The Swatch Component displays item inside `SwatchGroup`\n */\nconst Swatch = (props) => {\n    const {\n        disabled,\n        selected,\n        label,\n        children,\n        href,\n        variant = 'square',\n        onChange,\n        value,\n        name\n    } = props\n    const styles = useMultiStyleConfig('SwatchGroup', {variant, disabled, selected})\n    return (\n        <Button\n            {...styles.swatch}\n            as={RouteLink}\n            to={href}\n            aria-label={name}\n            onClick={(e) => {\n                e.preventDefault()\n                onChange(value, href)\n            }}\n            aria-checked={selected}\n            variant=\"outline\"\n            role=\"radio\"\n        >\n            <Center {...styles.swatchButton}>\n                {children}\n                {label && <Box>{label}</Box>}\n            </Center>\n        </Button>\n    )\n}\n\nSwatch.displayName = 'Swatch'\n\nSwatch.propTypes = {\n    /**\n     * The children to be rendered within swatch item.\n     */\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n    /**\n     * Indicates whether the option is disabled\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Indicates whether the option is selected.\n     * This props is provided internally by SwatchGroup\n     */\n    selected: PropTypes.bool,\n    /**\n     * The shape of the Swatch\n     */\n    variant: PropTypes.oneOf(['square', 'circle']),\n    /**\n     * The label of the option.\n     */\n    label: PropTypes.string,\n    /**\n     *  The url of this option\n     */\n    href: PropTypes.string,\n    /**\n     * This function is called whenever the user selects an option.\n     * It is passed the new value.\n     */\n    onChange: PropTypes.func,\n    /**\n     * The value for the option.\n     */\n    value: PropTypes.string,\n    /**\n     * The display value for each swatch\n     */\n    name: PropTypes.string\n}\n\nexport default Swatch\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {useState, useMemo, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {useLocation} from 'react-router-dom'\n\n// Chakra Components\nimport {\n    AspectRatio,\n    Box,\n    Img,\n    Flex,\n\n    // Hooks\n    Skeleton as ChakraSkeleton,\n    ListItem,\n    List,\n    useMultiStyleConfig\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {findImageGroupBy} from '@salesforce/retail-react-app/app/utils/image-groups-utils'\nimport DynamicImage from '@salesforce/retail-react-app/app/components/dynamic-image'\n\nconst EnterKeyNumber = 13\n\nconst LARGE = 'large'\nconst SMALL = 'small'\n\n/**\n * The skeleton representation of the image gallery component. Use this component while\n * you are waiting for product data to be returnd from the server.\n */\nexport const Skeleton = ({size}) => {\n    const styles = useMultiStyleConfig('ImageGallery', {size})\n\n    return (\n        <Box data-testid=\"sf-image-gallery-skeleton\">\n            <Flex flexDirection=\"column\">\n                <AspectRatio ratio={1} {...styles.heroImageSkeleton}>\n                    <ChakraSkeleton />\n                </AspectRatio>\n                <Flex>\n                    {new Array(4).fill(0).map((_, index) => (\n                        <AspectRatio ratio={1} {...styles.thumbnailImageSkeleton} key={index}>\n                            <ChakraSkeleton />\n                        </AspectRatio>\n                    ))}\n                </Flex>\n            </Flex>\n        </Box>\n    )\n}\n\nSkeleton.propTypes = {\n    size: PropTypes.bool\n}\n\n/**\n * The image gallery displays a hero image and thumbnails below it. You can control which\n * image groups that are use by passing in the current selected variation values.\n */\nconst ImageGallery = ({imageGroups = [], selectedVariationAttributes = {}, size, lazy = false}) => {\n    const [selectedIndex, setSelectedIndex] = useState(0)\n    const styles = useMultiStyleConfig('ImageGallery', {size})\n    const location = useLocation()\n\n    // Get the 'hero' image for the current variation.\n    const heroImageGroup = useMemo(\n        () =>\n            findImageGroupBy(imageGroups, {\n                viewType: LARGE,\n                selectedVariationAttributes\n            }),\n        [selectedVariationAttributes]\n    )\n\n    useEffect(() => {\n        // reset the selected index when location search changes\n        setSelectedIndex(0)\n    }, [location.search])\n\n    // Get a memoized image group used for the thumbnails. We use the `useMemo` hook\n    // so we don't have to waste time filtering the image groups each render if the\n    // selected variation attributes haven't changed.\n    const thumbnailImageGroup = useMemo(\n        () =>\n            findImageGroupBy(imageGroups, {\n                viewType: SMALL,\n                selectedVariationAttributes\n            }),\n        [selectedVariationAttributes]\n    )\n\n    const heroImage = heroImageGroup?.images?.[selectedIndex]\n    const thumbnailImages = thumbnailImageGroup?.images || []\n    const loadingStrategy = lazy ? 'lazy' : 'eager'\n\n    const heroImageMaxWidth = styles.heroImage.maxWidth[3] // in px\n\n    return (\n        <Flex direction=\"column\">\n            {heroImage && (\n                <Box {...styles.heroImageGroup}>\n                    <AspectRatio {...styles.heroImage} ratio={1}>\n                        <DynamicImage\n                            src={`${heroImage.disBaseLink || heroImage.link}[?sw={width}&q=60]`}\n                            widths={{\n                                base: '100vw',\n                                lg: heroImageMaxWidth\n                            }}\n                            imageProps={{\n                                alt: heroImage.alt,\n                                loading: loadingStrategy\n                            }}\n                        />\n                    </AspectRatio>\n                </Box>\n            )}\n\n            <List display={'flex'} flexWrap={'wrap'}>\n                {thumbnailImages.map((image, index) => {\n                    const selected = index === selectedIndex\n                    return (\n                        <ListItem\n                            {...styles.thumbnailImageItem}\n                            tabIndex={0}\n                            key={index}\n                            data-testid=\"image-gallery-thumbnails\"\n                            onKeyDown={(e) => {\n                                if (e.keyCode === EnterKeyNumber) {\n                                    return setSelectedIndex(index)\n                                }\n                            }}\n                            onClick={() => setSelectedIndex(index)}\n                            borderColor={`${selected ? 'black' : ''}`}\n                            borderWidth={`${selected ? '1px' : 0}`}\n                        >\n                            <AspectRatio ratio={1}>\n                                <Img\n                                    alt={image.alt}\n                                    src={image.disBaseLink || image.link}\n                                    loading={loadingStrategy}\n                                />\n                            </AspectRatio>\n                        </ListItem>\n                    )\n                })}\n            </List>\n        </Flex>\n    )\n}\n\nImageGallery.propTypes = {\n    /**\n     * The images array to be rendered\n     */\n    imageGroups: PropTypes.array,\n    /**\n     * The current selected variation values\n     */\n    selectedVariationAttributes: PropTypes.object,\n    /**\n     * Size of the Image gallery, this will be used to determined the max width from styles\n     */\n    size: PropTypes.string,\n    /**\n     * Determines whether the image will be lazy loaded or not\n     */\n    lazy: PropTypes.bool\n}\n\nexport default ImageGallery\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {forwardRef, useEffect, useRef, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {useHistory, useLocation} from 'react-router-dom'\nimport {useIntl} from 'react-intl'\n\nimport {\n    Flex,\n    Heading,\n    Button,\n    Skeleton,\n    Box,\n    Text,\n    VStack,\n    Fade,\n    useTheme\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {useDerivedProduct} from '@salesforce/retail-react-app/app/hooks'\nimport {useAddToCartModalContext} from '@salesforce/retail-react-app/app/hooks/use-add-to-cart-modal'\n\n// project components\nimport SwatchGroup from '@salesforce/retail-react-app/app/components/swatch-group'\nimport Swatch from '@salesforce/retail-react-app/app/components/swatch-group/swatch'\nimport ImageGallery from '@salesforce/retail-react-app/app/components/image-gallery'\nimport Breadcrumb from '@salesforce/retail-react-app/app/components/breadcrumb'\nimport Link from '@salesforce/retail-react-app/app/components/link'\nimport withRegistration from '@salesforce/retail-react-app/app/components/with-registration'\nimport {useCurrency} from '@salesforce/retail-react-app/app/hooks'\nimport {Skeleton as ImageGallerySkeleton} from '@salesforce/retail-react-app/app/components/image-gallery'\nimport {HideOnDesktop, HideOnMobile} from '@salesforce/retail-react-app/app/components/responsive'\nimport QuantityPicker from '@salesforce/retail-react-app/app/components/quantity-picker'\nimport {useToast} from '@salesforce/retail-react-app/app/hooks/use-toast'\nimport {API_ERROR_MESSAGE} from '@salesforce/retail-react-app/app/constants'\n\nconst ProductViewHeader = ({name, price, currency, category, productType}) => {\n    const intl = useIntl()\n    const {currency: activeCurrency} = useCurrency()\n    const isProductASet = productType?.set\n\n    return (\n        <VStack mr={4} spacing={2} align=\"flex-start\" marginBottom={[4, 4, 4, 0, 0]}>\n            {category && (\n                <Skeleton isLoaded={category} minWidth={64}>\n                    <Breadcrumb categories={category} />\n                </Skeleton>\n            )}\n\n            {/* Title */}\n            <Skeleton isLoaded={name}>\n                <Heading fontSize=\"2xl\">{`${name}`}</Heading>\n            </Skeleton>\n\n            {/* Price */}\n            <Skeleton isLoaded={price} minWidth={32}>\n                <Text fontWeight=\"bold\" fontSize=\"md\" aria-label=\"price\">\n                    {isProductASet &&\n                        `${intl.formatMessage({\n                            id: 'product_view.label.starting_at_price',\n                            defaultMessage: 'Starting at'\n                        })} `}\n                    {intl.formatNumber(price, {\n                        style: 'currency',\n                        currency: currency || activeCurrency\n                    })}\n                </Text>\n            </Skeleton>\n        </VStack>\n    )\n}\n\nProductViewHeader.propTypes = {\n    name: PropTypes.string,\n    price: PropTypes.number,\n    currency: PropTypes.string,\n    category: PropTypes.array,\n    productType: PropTypes.object\n}\n\nconst ButtonWithRegistration = withRegistration(Button)\n\n/**\n * Render a product detail view that includes name, image gallery, price,\n * variant selections, action buttons\n */\n\nconst ProductView = forwardRef(\n    (\n        {\n            product,\n            category,\n            showFullLink = false,\n            imageSize = 'md',\n            isWishlistLoading = false,\n            addToCart,\n            updateCart,\n            addToWishlist,\n            updateWishlist,\n            isProductLoading,\n            isProductPartOfSet = false,\n            isBasketLoading = false,\n            onVariantSelected = () => {},\n            validateOrderability = (variant, quantity, stockLevel) =>\n                !isProductLoading && variant?.orderable && quantity > 0 && quantity <= stockLevel\n        },\n        ref\n    ) => {\n        const showToast = useToast()\n        const intl = useIntl()\n        const history = useHistory()\n        const location = useLocation()\n        const {\n            isOpen: isAddToCartModalOpen,\n            onOpen: onAddToCartModalOpen,\n            onClose: onAddToCartModalClose\n        } = useAddToCartModalContext()\n        const theme = useTheme()\n        const [showOptionsMessage, toggleShowOptionsMessage] = useState(false)\n        const {\n            showLoading,\n            showInventoryMessage,\n            inventoryMessage,\n            quantity,\n            minOrderQuantity,\n            setQuantity,\n            variant,\n            variationParams,\n            variationAttributes,\n            stockLevel,\n            stepQuantity\n        } = useDerivedProduct(product, isProductPartOfSet)\n        const canAddToWishlist = !isProductLoading\n        const isProductASet = product?.type.set\n        const errorContainerRef = useRef(null)\n\n        const validateAndShowError = (opts = {}) => {\n            const {scrollErrorIntoView = true} = opts\n            // Validate that all attributes are selected before proceeding.\n            const hasValidSelection = validateOrderability(variant, quantity, stockLevel)\n            const showError = !isProductASet && !hasValidSelection\n            const scrollToError = showError && scrollErrorIntoView\n\n            toggleShowOptionsMessage(showError)\n\n            if (scrollToError) {\n                errorContainerRef.current.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                })\n            }\n\n            return hasValidSelection\n        }\n\n        const renderActionButtons = () => {\n            const buttons = []\n            const buttonText = {\n                update: intl.formatMessage({\n                    defaultMessage: 'Update',\n                    id: 'product_view.button.update'\n                }),\n                addToCart: intl.formatMessage({\n                    defaultMessage: 'Add to Cart',\n                    id: 'product_view.button.add_to_cart'\n                }),\n                addSetToCart: intl.formatMessage({\n                    defaultMessage: 'Add Set to Cart',\n                    id: 'product_view.button.add_set_to_cart'\n                }),\n                addToWishlist: intl.formatMessage({\n                    defaultMessage: 'Add to Wishlist',\n                    id: 'product_view.button.add_to_wishlist'\n                }),\n                addSetToWishlist: intl.formatMessage({\n                    defaultMessage: 'Add Set to Wishlist',\n                    id: 'product_view.button.add_set_to_wishlist'\n                })\n            }\n\n            const showError = () => {\n                showToast({\n                    title: intl.formatMessage(API_ERROR_MESSAGE),\n                    status: 'error'\n                })\n            }\n\n            const handleCartItem = async () => {\n                const hasValidSelection = validateAndShowError()\n\n                if (!hasValidSelection) {\n                    return null\n                }\n\n                if (!addToCart && !updateCart) return null\n                if (updateCart) {\n                    await updateCart(variant, quantity)\n                    return\n                }\n                try {\n                    const itemsAdded = await addToCart(variant, quantity)\n                    // Open modal only when `addToCart` returns some data\n                    // It's possible that the item has been added to cart, but we don't want to open the modal.\n                    // See wishlist_primary_action for example.\n                    if (itemsAdded) {\n                        onAddToCartModalOpen({\n                            product,\n                            itemsAdded\n                        })\n                    }\n                } catch (e) {\n                    showError()\n                }\n            }\n\n            const handleWishlistItem = async () => {\n                if (!updateWishlist && !addToWishlist) return null\n                if (updateWishlist) {\n                    updateWishlist(product, variant, quantity)\n                    return\n                }\n                addToWishlist(product, variant, quantity)\n            }\n\n            if (addToCart || updateCart) {\n                buttons.push(\n                    <Button\n                        key=\"cart-button\"\n                        onClick={handleCartItem}\n                        disabled={isBasketLoading || showInventoryMessage}\n                        isLoading={isBasketLoading}\n                        width=\"100%\"\n                        variant=\"solid\"\n                        marginBottom={4}\n                    >\n                        {updateCart\n                            ? buttonText.update\n                            : isProductASet\n                            ? buttonText.addSetToCart\n                            : buttonText.addToCart}\n                    </Button>\n                )\n            }\n\n            if (addToWishlist || updateWishlist) {\n                buttons.push(\n                    <ButtonWithRegistration\n                        key=\"wishlist-button\"\n                        onClick={handleWishlistItem}\n                        disabled={isWishlistLoading || !canAddToWishlist}\n                        isLoading={isWishlistLoading}\n                        width=\"100%\"\n                        variant=\"outline\"\n                        marginBottom={4}\n                    >\n                        {updateWishlist\n                            ? buttonText.update\n                            : isProductASet\n                            ? buttonText.addSetToWishlist\n                            : buttonText.addToWishlist}\n                    </ButtonWithRegistration>\n                )\n            }\n\n            return buttons\n        }\n\n        // Bind the reference with our `scope` that includes the internal validate function for this component.\n        // Other values can be added to this scope as required.\n        if (typeof ref === 'function') {\n            ref = ref.bind({validateOrderability: validateAndShowError})\n        }\n\n        useEffect(() => {\n            if (isAddToCartModalOpen) {\n                onAddToCartModalClose()\n            }\n        }, [location.pathname])\n\n        useEffect(() => {\n            if (!isProductASet && validateOrderability(variant, quantity, stockLevel)) {\n                toggleShowOptionsMessage(false)\n            }\n        }, [variationParams])\n\n        useEffect(() => {\n            if (variant) {\n                onVariantSelected(product, variant, quantity)\n            }\n        }, [variant?.productId, quantity])\n\n        return (\n            <Flex direction={'column'} data-testid=\"product-view\" ref={ref}>\n                {/* Basic information etc. title, price, breadcrumb*/}\n                <Box display={['block', 'block', 'block', 'none']}>\n                    <ProductViewHeader\n                        name={product?.name}\n                        price={product?.pricePerUnit || product?.price}\n                        productType={product?.type}\n                        currency={product?.currency}\n                        category={category}\n                    />\n                </Box>\n                <Flex direction={['column', 'column', 'column', 'row']}>\n                    <Box flex={1} mr={[0, 0, 0, 6, 6]}>\n                        {product ? (\n                            <>\n                                <ImageGallery\n                                    size={imageSize}\n                                    imageGroups={product.imageGroups}\n                                    selectedVariationAttributes={variationParams}\n                                    lazy={isProductPartOfSet}\n                                />\n                                <HideOnMobile>\n                                    {showFullLink && product && (\n                                        <Link to={`/product/${product.master.masterId}`}>\n                                            <Text color=\"blue.600\">\n                                                {intl.formatMessage({\n                                                    defaultMessage: 'See full details',\n                                                    id: 'product_view.link.full_details'\n                                                })}\n                                            </Text>\n                                        </Link>\n                                    )}\n                                </HideOnMobile>\n                            </>\n                        ) : (\n                            <ImageGallerySkeleton />\n                        )}\n                    </Box>\n\n                    {/* Variations & Quantity Selector & CTA buttons */}\n                    <VStack align=\"stretch\" spacing={8} flex={1}>\n                        <Box display={['none', 'none', 'none', 'block']}>\n                            <ProductViewHeader\n                                name={product?.name}\n                                price={product?.pricePerUnit || product?.price}\n                                productType={product?.type}\n                                currency={product?.currency}\n                                category={category}\n                            />\n                        </Box>\n                        <VStack align=\"stretch\" spacing={4}>\n                            {/*\n                                Customize the skeletons shown for attributes to suit your needs. At the point\n                                that we show the skeleton we do not know how many variations are selectable. So choose\n                                a a skeleton that will meet most of your needs.\n                            */}\n                            {showLoading ? (\n                                <>\n                                    {/* First Attribute Skeleton */}\n                                    <Skeleton height={6} width={32} />\n                                    <Skeleton height={20} width={64} />\n\n                                    {/* Second Attribute Skeleton */}\n                                    <Skeleton height={6} width={32} />\n                                    <Skeleton height={20} width={64} />\n                                </>\n                            ) : (\n                                <>\n                                    {/* Attribute Swatches */}\n                                    {variationAttributes.map((variationAttribute) => {\n                                        const {\n                                            id,\n                                            name,\n                                            selectedValue,\n                                            values = []\n                                        } = variationAttribute\n                                        return (\n                                            <SwatchGroup\n                                                key={id}\n                                                onChange={(_, href) => {\n                                                    if (!href) return\n                                                    history.replace(href)\n                                                }}\n                                                variant={id === 'color' ? 'circle' : 'square'}\n                                                value={selectedValue?.value}\n                                                displayName={selectedValue?.name || ''}\n                                                label={name}\n                                            >\n                                                {values.map(\n                                                    ({href, name, image, value, orderable}) => (\n                                                        <Swatch\n                                                            key={value}\n                                                            href={href}\n                                                            disabled={!orderable}\n                                                            value={value}\n                                                            name={name}\n                                                        >\n                                                            {image ? (\n                                                                <Box\n                                                                    height=\"100%\"\n                                                                    width=\"100%\"\n                                                                    minWidth=\"32px\"\n                                                                    backgroundRepeat=\"no-repeat\"\n                                                                    backgroundSize=\"cover\"\n                                                                    backgroundColor={name.toLowerCase()}\n                                                                    backgroundImage={\n                                                                        image\n                                                                            ? `url(${\n                                                                                  image.disBaseLink ||\n                                                                                  image.link\n                                                                              })`\n                                                                            : ''\n                                                                    }\n                                                                />\n                                                            ) : (\n                                                                name\n                                                            )}\n                                                        </Swatch>\n                                                    )\n                                                )}\n                                            </SwatchGroup>\n                                        )\n                                    })}\n                                </>\n                            )}\n\n                            {/* Quantity Selector */}\n                            {!isProductASet && (\n                                <VStack align=\"stretch\" maxWidth={'200px'}>\n                                    <Box fontWeight=\"bold\">\n                                        <label htmlFor=\"quantity\">\n                                            {intl.formatMessage({\n                                                defaultMessage: 'Quantity',\n                                                id: 'product_view.label.quantity'\n                                            })}\n                                            :\n                                        </label>\n                                    </Box>\n\n                                    <QuantityPicker\n                                        id=\"quantity\"\n                                        step={stepQuantity}\n                                        value={quantity}\n                                        min={minOrderQuantity}\n                                        onChange={(stringValue, numberValue) => {\n                                            // Set the Quantity of product to value of input if value number\n                                            if (numberValue >= 0) {\n                                                setQuantity(numberValue)\n                                            } else if (stringValue === '') {\n                                                // We want to allow the use to clear the input to start a new input so here we set the quantity to '' so NAN is not displayed\n                                                // User will not be able to add '' qauntity to the cart due to the add to cart button enablement rules\n                                                setQuantity(stringValue)\n                                            }\n                                        }}\n                                        onBlur={(e) => {\n                                            // Default to 1the `minOrderQuantity` if a user leaves the box with an invalid value\n                                            const value = e.target.value\n                                            if (parseInt(value) < 0 || value === '') {\n                                                setQuantity(minOrderQuantity)\n                                            }\n                                        }}\n                                        onFocus={(e) => {\n                                            // This is useful for mobile devices, this allows the user to pop open the keyboard and set the\n                                            // new quantity with one click. NOTE: This is something that can be refactored into the parent\n                                            // component, potentially as a prop called `selectInputOnFocus`.\n                                            e.target.select()\n                                        }}\n                                    />\n                                </VStack>\n                            )}\n                            <Box ref={errorContainerRef}>\n                                {!showLoading && showOptionsMessage && (\n                                    <Fade in={true}>\n                                        <Text color=\"orange.600\" fontWeight={600} marginBottom={8}>\n                                            {intl.formatMessage({\n                                                defaultMessage:\n                                                    'Please select all your options above'\n                                            })}\n                                        </Text>\n                                    </Fade>\n                                )}\n                            </Box>\n                            <HideOnDesktop>\n                                {showFullLink && product && (\n                                    <Link to={`/product/${product.master.masterId}`}>\n                                        <Text color=\"blue.600\">\n                                            {intl.formatMessage({\n                                                defaultMessage: 'See full details',\n                                                id: 'product_view.link.full_details'\n                                            })}\n                                        </Text>\n                                    </Link>\n                                )}\n                            </HideOnDesktop>\n                            {isProductASet && <p>{product?.shortDescription}</p>}\n                        </VStack>\n\n                        <Box>\n                            {!showLoading && showInventoryMessage && (\n                                <Fade in={true}>\n                                    <Text color=\"orange.600\" fontWeight={600} marginBottom={8}>\n                                        {inventoryMessage}\n                                    </Text>\n                                </Fade>\n                            )}\n                            <Box\n                                display={\n                                    isProductPartOfSet ? 'block' : ['none', 'none', 'none', 'block']\n                                }\n                            >\n                                {renderActionButtons()}\n                            </Box>\n                        </Box>\n                    </VStack>\n                </Flex>\n\n                {/* Sticky call-to-action buttons for mobile and certain product types */}\n                <Box\n                    position=\"fixed\"\n                    bg=\"white\"\n                    width=\"100%\"\n                    display={isProductPartOfSet ? 'none' : ['block', 'block', 'block', 'none']}\n                    p={[4, 4, 6]}\n                    left={0}\n                    bottom={0}\n                    zIndex={2}\n                    boxShadow={theme.shadows.top}\n                >\n                    {renderActionButtons()}\n                </Box>\n            </Flex>\n        )\n    }\n)\n\nProductView.displayName = 'ProductView'\n\nProductView.propTypes = {\n    product: PropTypes.object,\n    isProductPartOfSet: PropTypes.bool,\n    category: PropTypes.array,\n    isProductLoading: PropTypes.bool,\n    isBasketLoading: PropTypes.bool,\n    isWishlistLoading: PropTypes.bool,\n    addToCart: PropTypes.func,\n    addToWishlist: PropTypes.func,\n    updateCart: PropTypes.func,\n    updateWishlist: PropTypes.func,\n    showFullLink: PropTypes.bool,\n    imageSize: PropTypes.oneOf(['sm', 'md']),\n    onVariantSelected: PropTypes.func,\n    validateOrderability: PropTypes.func\n}\n\nexport default ProductView\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {\n    Button,\n    HStack,\n    Input,\n    useNumberInput\n} from '@salesforce/retail-react-app/app/components/shared/ui'\n\n/**\n * This is the mobile implementation of the Chakra NumberInput. This simple component essentially\n * is a helper so we don't have to reuse the hooks every time we need a number input since design dictates\n * we use the moobile variation on all screens.\n *\n * NOTE: We can optionally put global logic we see if in here, and various styling decisions in this single\n * component.\n *\n * @param {*} props\n * @returns\n */\nconst QuantityPicker = (props) => {\n    const {getInputProps, getIncrementButtonProps, getDecrementButtonProps} = useNumberInput({\n        ...props,\n        // Defaults\n        focusInputOnChange: false,\n        onFocus: (e) => {\n            // eslint-disable-next-line react/prop-types\n            const {onFocus} = props\n\n            // This is useful for mobile devices, this allows the user to pop open the keyboard and set the\n            // new quantity with one click.\n            e.target.select()\n\n            // If there is a `onFocus` property define, call it with the event captured.\n            // eslint-disable-next-line react/prop-types\n            onFocus && onFocus.call(this, e)\n        }\n    })\n\n    const inc = getIncrementButtonProps({variant: 'outline'})\n    const dec = getDecrementButtonProps({variant: 'outline'})\n    const input = getInputProps({maxWidth: '44px', textAlign: 'center'})\n\n    return (\n        <HStack>\n            <Button data-testid=\"quantity-decrement\" {...dec}>\n                -\n            </Button>\n            <Input {...input} />\n            <Button data-testid=\"quantity-increment\" {...inc}>\n                +\n            </Button>\n        </HStack>\n    )\n}\n\nexport default QuantityPicker\n"],"names":["Breadcrumb","_ref","categories","rest","_objectWithoutProperties","_excluded","intl","useIntl","styles","useStyleConfig","React","ChakraBreadcrumb","_extends","className","container","separator","ChevronRightIcon","icon","map","category","ChakraBreadcrumbItem","key","id","ChakraBreadcrumbLink","as","RouteLink","to","categoryUrlBuilder","locale","link","name","displayName","propTypes","PropTypes","SwatchGroup","props","children","value","selectedValue","label","variant","onChange","noop","Flex","swatchGroup","role","HStack","swatchLabel","Box","fontWeight","swatchesWrapper","child","childValue","selected","Swatch","disabled","href","useMultiStyleConfig","Button","swatch","onClick","e","preventDefault","Center","swatchButton","Skeleton","size","flexDirection","AspectRatio","ratio","heroImageSkeleton","ChakraSkeleton","Array","fill","_","index","thumbnailImageSkeleton","ImageGallery","imageGroups","selectedVariationAttributes","lazy","_heroImageGroup$image","selectedIndex","setSelectedIndex","useState","location","useLocation","heroImageGroup","useMemo","findImageGroupBy","viewType","useEffect","search","thumbnailImageGroup","heroImage","images","thumbnailImages","loadingStrategy","heroImageMaxWidth","maxWidth","direction","DynamicImage","src","disBaseLink","widths","base","lg","imageProps","alt","loading","List","display","flexWrap","image","ListItem","thumbnailImageItem","tabIndex","onKeyDown","keyCode","borderColor","borderWidth","Img","ProductViewHeader","price","currency","productType","activeCurrency","useCurrency","isProductASet","set","VStack","mr","spacing","align","marginBottom","isLoaded","minWidth","Heading","fontSize","Text","formatMessage","defaultMessage","formatNumber","style","ButtonWithRegistration","withRegistration","ProductView","forwardRef","product","showFullLink","imageSize","isWishlistLoading","addToCart","updateCart","addToWishlist","updateWishlist","isProductLoading","isProductPartOfSet","isBasketLoading","onVariantSelected","validateOrderability","quantity","stockLevel","orderable","ref","showToast","useToast","history","useHistory","isOpen","isAddToCartModalOpen","onOpen","onAddToCartModalOpen","onClose","onAddToCartModalClose","useAddToCartModalContext","theme","useTheme","showOptionsMessage","toggleShowOptionsMessage","showLoading","showInventoryMessage","inventoryMessage","minOrderQuantity","setQuantity","variationParams","variationAttributes","stepQuantity","useDerivedProduct","canAddToWishlist","type","errorContainerRef","useRef","validateAndShowError","opts","scrollErrorIntoView","hasValidSelection","showError","scrollToError","current","scrollIntoView","behavior","block","renderActionButtons","buttons","buttonText","update","addSetToCart","addSetToWishlist","handleCartItem","_asyncToGenerator","itemsAdded","title","API_ERROR_MESSAGE","status","apply","arguments","handleWishlistItem","_ref2","push","isLoading","width","bind","pathname","productId","pricePerUnit","flex","HideOnMobile","Link","master","masterId","color","ImageGallerySkeleton","height","variationAttribute","values","replace","backgroundRepeat","backgroundSize","backgroundColor","toLowerCase","backgroundImage","htmlFor","QuantityPicker","step","min","stringValue","numberValue","onBlur","target","parseInt","onFocus","select","Fade","in","HideOnDesktop","shortDescription","position","bg","p","left","bottom","zIndex","boxShadow","shadows","top","getInputProps","getIncrementButtonProps","getDecrementButtonProps","useNumberInput","_objectSpread","focusInputOnChange","call","inc","dec","input","textAlign","Input"],"sourceRoot":""}