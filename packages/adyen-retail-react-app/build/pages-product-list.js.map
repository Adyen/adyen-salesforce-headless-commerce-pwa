{"version":3,"file":"pages-product-list.js","mappings":"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","sources":["webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/breadcrumb/index.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/pagination/index.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/color-refinements.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/size-refinements.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/radio-refinements.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/checkbox-refinements.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/link-refinements.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/refinements.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/selected-refinements.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/empty-results.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/page-header.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/partials/above-page-header.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/product-list/index.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link as RouteLink} from 'react-router-dom'\nimport {useIntl} from 'react-intl'\n\n// Components\nimport {\n    Breadcrumb as ChakraBreadcrumb,\n    BreadcrumbItem as ChakraBreadcrumbItem,\n    BreadcrumbLink as ChakraBreadcrumbLink,\n    // Hooks\n    useStyleConfig\n} from '@salesforce/retail-react-app/app/components/shared/ui'\n\n// Icons\nimport {ChevronRightIcon} from '@salesforce/retail-react-app/app/components/icons'\n\n// Others\nimport {categoryUrlBuilder} from '@salesforce/retail-react-app/app/utils/url'\n\n/**\n * A simplification of the Chakra `Breadcrumb` component for our project needs. Given\n * a list of categories, display a breadcrumb and it's items.\n */\nconst Breadcrumb = ({categories, ...rest}) => {\n    const intl = useIntl()\n    const styles = useStyleConfig('Breadcrumb')\n\n    return (\n        <ChakraBreadcrumb\n            className=\"sf-breadcrumb\"\n            {...styles.container}\n            separator={<ChevronRightIcon {...styles.icon} />}\n            {...rest}\n        >\n            {categories.map((category) => (\n                <ChakraBreadcrumbItem key={category.id} data-testid=\"sf-crumb-item\">\n                    <ChakraBreadcrumbLink\n                        as={RouteLink}\n                        to={categoryUrlBuilder(category, intl.locale)}\n                        {...styles.link}\n                    >\n                        {category.name}\n                    </ChakraBreadcrumbLink>\n                </ChakraBreadcrumbItem>\n            ))}\n        </ChakraBreadcrumb>\n    )\n}\n\nBreadcrumb.displayName = 'Breadcrumb'\n\nBreadcrumb.propTypes = {\n    /**\n     * The categories to be displayed in this breadcrumb.\n     */\n    categories: PropTypes.array\n}\n\nexport default Breadcrumb\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {useIntl} from 'react-intl'\nimport {Link as RouteLink, useHistory} from 'react-router-dom'\n\n// Components\nimport {\n    Button,\n    Flex,\n    Select,\n    Text,\n\n    // Hooks\n    useStyleConfig\n} from '@salesforce/retail-react-app/app/components/shared/ui'\n\n// Icons\nimport {ChevronLeftIcon, ChevronRightIcon} from '@salesforce/retail-react-app/app/components/icons'\n\n// Constants\nconst SELECT_ID = 'pagination'\n\n/**\n * The pagination component is a simple component allowing you to navigate\n * from one page  to the next by means of previous or next buttons, or directly\n * using a select drop down.\n */\nconst Pagination = (props) => {\n    const intl = useIntl()\n    const styles = useStyleConfig('Pagination')\n    const history = useHistory()\n    const {urls, currentURL, ...rest} = props\n\n    const currentIndex = urls.indexOf(currentURL) > 0 ? urls.indexOf(currentURL) : 0\n    const prev = urls[currentIndex - 1]\n    const next = urls[currentIndex + 1]\n\n    // Determine the current page index.\n    return (\n        <Flex data-testid=\"sf-pagination\" className=\"sf-pagination\" {...styles.container} {...rest}>\n            {/* Previous Button */}\n            <Button\n                {...styles.button}\n                as={RouteLink}\n                // Because we are using a button component as a link, the isDisabled flag isn't working\n                // as intended, the workaround is to use the current url when its disabled.\n                href={prev || currentURL}\n                to={prev || currentURL}\n                aria-label=\"Previous Page\"\n                isDisabled={!prev}\n                variant=\"link\"\n            >\n                <ChevronLeftIcon />\n                <Text>\n                    {intl.formatMessage({\n                        id: 'pagination.link.prev',\n                        defaultMessage: 'Prev'\n                    })}\n                </Text>\n            </Button>\n\n            {/* Direct Page Selection */}\n            <Flex paddingLeft={4} paddingRight={4}>\n                <Select\n                    id={SELECT_ID}\n                    onChange={(e) => {\n                        history.push(e.target.value)\n                    }}\n                    value={currentURL}\n                    height={11}\n                >\n                    {urls.map((href, index) => (\n                        <option key={index} value={href}>\n                            {index + 1}\n                        </option>\n                    ))}\n                </Select>\n\n                <Text {...styles.text}>\n                    {intl.formatMessage(\n                        {\n                            id: 'pagination.field.num_of_pages',\n                            defaultMessage: 'of {numOfPages}'\n                        },\n                        {numOfPages: urls.length}\n                    )}\n                </Text>\n            </Flex>\n\n            {/* Next Button */}\n            <Button\n                {...styles.button}\n                as={RouteLink}\n                // Because we are using a button component as a link, the isDisabled flag isn't working\n                // as intended, the workaround is to use the current url when its disabled.\n                href={next || currentURL}\n                to={next || currentURL}\n                aria-label=\"Next Page\"\n                isDisabled={!next}\n                variant=\"link\"\n            >\n                <Text>\n                    {intl.formatMessage({\n                        id: 'pagination.link.next',\n                        defaultMessage: 'Next'\n                    })}\n                </Text>\n                <ChevronRightIcon />\n            </Button>\n        </Flex>\n    )\n}\n\nPagination.displayName = 'Pagination'\n\nPagination.propTypes = {\n    /**\n     * A list of URL's representing the pages that can be navigated to.\n     */\n    urls: PropTypes.array.isRequired,\n    /**\n     * The URL representing the current page\n     */\n    currentURL: PropTypes.string\n}\n\nexport default Pagination\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {\n    Box,\n    SimpleGrid,\n    HStack,\n    Text,\n    Button,\n    Center,\n    useMultiStyleConfig\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport PropTypes from 'prop-types'\nimport {cssColorGroups} from '@salesforce/retail-react-app/app/constants'\n\nconst ColorRefinements = ({filter, toggleFilter, selectedFilters}) => {\n    const styles = useMultiStyleConfig('SwatchGroup', {\n        variant: 'circle',\n        disabled: false\n    })\n\n    return (\n        <SimpleGrid columns={2} spacing={2} mt={1}>\n            {filter.values\n                .filter((refinementValue) => refinementValue.hitCount > 0)\n                .map((value, idx) => {\n                    const isSelected = selectedFilters.includes(value.value)\n\n                    return (\n                        <Box key={idx}>\n                            <HStack\n                                onClick={() => toggleFilter(value, filter.attributeId, isSelected)}\n                                spacing={1}\n                                cursor=\"pointer\"\n                            >\n                                <Button\n                                    {...styles.swatch}\n                                    color={isSelected ? 'black' : 'gray.200'}\n                                    border={isSelected ? '1px' : '0'}\n                                    aria-checked={isSelected}\n                                    variant=\"outline\"\n                                    marginRight={0}\n                                    marginBottom=\"-1px\"\n                                >\n                                    <Center\n                                        {...styles.swatchButton}\n                                        marginRight={0}\n                                        border={\n                                            value.label.toLowerCase() === 'white' &&\n                                            '1px solid black'\n                                        }\n                                    >\n                                        <Box\n                                            marginRight={0}\n                                            height=\"100%\"\n                                            width=\"100%\"\n                                            minWidth=\"32px\"\n                                            backgroundRepeat=\"no-repeat\"\n                                            backgroundSize=\"cover\"\n                                            backgroundColor={\n                                                cssColorGroups[value.presentationId.toLowerCase()]\n                                            }\n                                            background={\n                                                value.presentationId.toLowerCase() ===\n                                                    'miscellaneous' &&\n                                                cssColorGroups[value.presentationId.toLowerCase()]\n                                            }\n                                        />\n                                    </Center>\n                                </Button>\n                                <Text\n                                    display=\"flex\"\n                                    alignItems=\"center\"\n                                    fontSize=\"sm\"\n                                    marginBottom=\"1px\"\n                                >{`${value.label} (${value.hitCount})`}</Text>\n                            </HStack>\n                        </Box>\n                    )\n                })}\n        </SimpleGrid>\n    )\n}\n\nColorRefinements.propTypes = {\n    filter: PropTypes.object,\n    toggleFilter: PropTypes.func,\n    selectedFilters: PropTypes.array\n}\n\nexport default ColorRefinements\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {\n    SimpleGrid,\n    Button,\n    Center,\n    useMultiStyleConfig\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport PropTypes from 'prop-types'\n\nconst SizeRefinements = ({filter, toggleFilter, selectedFilters}) => {\n    const styles = useMultiStyleConfig('SwatchGroup', {\n        variant: 'square',\n        disabled: false\n    })\n\n    return (\n        <SimpleGrid templateColumns=\"repeat(auto-fit, 44px)\" spacing={4} mt={1}>\n            {filter.values\n                ?.filter((refinementValue) => refinementValue.hitCount > 0)\n                .map((value, idx) => {\n                    // Note the loose comparison, for \"string == number\" checks.\n                    const isSelected = selectedFilters.some(\n                        (filterValue) => filterValue == value.value\n                    )\n\n                    return (\n                        <Button\n                            key={idx}\n                            {...styles.swatch}\n                            borderColor={isSelected ? 'black' : 'gray.200'}\n                            backgroundColor={isSelected ? 'black' : 'white'}\n                            color={isSelected ? 'white' : 'gray.900'}\n                            onClick={() => toggleFilter(value, filter.attributeId, isSelected)}\n                            aria-checked={isSelected}\n                            variant=\"outline\"\n                            marginBottom={0}\n                            marginRight={0}\n                        >\n                            <Center {...styles.swatchButton}>{value.label}</Center>\n                        </Button>\n                    )\n                })}\n        </SimpleGrid>\n    )\n}\n\nSizeRefinements.propTypes = {\n    filter: PropTypes.object,\n    selectedFilters: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    toggleFilter: PropTypes.func\n}\n\nexport default SizeRefinements\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {\n    Box,\n    Text,\n    Radio,\n    RadioGroup,\n    Stack\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport PropTypes from 'prop-types'\n\nconst RadioRefinements = ({filter, toggleFilter, selectedFilters}) => {\n    return (\n        <Box>\n            <RadioGroup\n                // The following `false` fallback is required to avoid the radio group\n                // from switching to \"uncontrolled mode\" when `selectedFilters` is empty.\n                value={selectedFilters[0] ?? false}\n            >\n                <Stack spacing={1}>\n                    {filter.values\n                        .filter((refinementValue) => refinementValue.hitCount > 0)\n                        .map((value) => {\n                            return (\n                                <Box key={value.value}>\n                                    <Radio\n                                        display=\"flex\"\n                                        alignItems=\"center\"\n                                        height={{base: '44px', lg: '24px'}}\n                                        value={value.value}\n                                        onChange={() =>\n                                            toggleFilter(\n                                                value,\n                                                filter.attributeId,\n                                                selectedFilters.includes(value.value),\n                                                false\n                                            )\n                                        }\n                                        fontSize=\"sm\"\n                                    >\n                                        <Text marginLeft={-1} fontSize=\"sm\">\n                                            {value.label}\n                                        </Text>\n                                    </Radio>\n                                </Box>\n                            )\n                        })}\n                </Stack>\n            </RadioGroup>\n        </Box>\n    )\n}\n\nRadioRefinements.propTypes = {\n    filter: PropTypes.object,\n    toggleFilter: PropTypes.func,\n    selectedFilters: PropTypes.array\n}\n\nexport default RadioRefinements\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {Box, Checkbox, Stack} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport PropTypes from 'prop-types'\n\nconst CheckboxRefinements = ({filter, toggleFilter, selectedFilters}) => {\n    return (\n        <Stack spacing={1}>\n            {filter.values\n                ?.filter((refinementValue) => refinementValue.hitCount > 0)\n                .map((value) => {\n                    const isChecked = selectedFilters.includes(value.value)\n\n                    return (\n                        <Box key={value.value}>\n                            <Checkbox\n                                isChecked={isChecked}\n                                onChange={() => toggleFilter(value, filter.attributeId, isChecked)}\n                            >\n                                {value.label}\n                            </Checkbox>\n                        </Box>\n                    )\n                })}\n        </Stack>\n    )\n}\n\nCheckboxRefinements.propTypes = {\n    filter: PropTypes.object,\n    toggleFilter: PropTypes.func,\n    selectedFilters: PropTypes.array\n}\n\nexport default CheckboxRefinements\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {Stack, Text} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport PropTypes from 'prop-types'\nimport Link from '@salesforce/retail-react-app/app/components/link'\n\nconst LinkRefinements = ({filter}) => {\n    return (\n        <Stack spacing={1}>\n            {filter.values.map((value) => {\n                return (\n                    <Link\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        lineHeight={{base: '44px', lg: '24px'}}\n                        key={value.value}\n                        href={`/category/${value.value}`}\n                        useNavLink\n                    >\n                        <Text fontSize=\"sm\">{value.label}</Text>\n                    </Link>\n                )\n            })}\n        </Stack>\n    )\n}\n\nLinkRefinements.propTypes = {\n    filter: PropTypes.object\n}\n\nexport default LinkRefinements\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {\n    Text,\n    Stack,\n    Divider,\n    Accordion,\n    AccordionItem,\n    AccordionButton,\n    AccordionPanel,\n    AccordionIcon\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport PropTypes from 'prop-types'\nimport ColorRefinements from '@salesforce/retail-react-app/app/pages/product-list/partials/color-refinements'\nimport SizeRefinements from '@salesforce/retail-react-app/app/pages/product-list/partials/size-refinements'\nimport RadioRefinements from '@salesforce/retail-react-app/app/pages/product-list/partials/radio-refinements'\nimport CheckboxRefinements from '@salesforce/retail-react-app/app/pages/product-list/partials/checkbox-refinements'\nimport LinkRefinements from '@salesforce/retail-react-app/app/pages/product-list/partials/link-refinements'\nimport {isServer} from '@salesforce/retail-react-app/app/utils/utils'\nimport {FILTER_ACCORDION_SATE} from '@salesforce/retail-react-app/app/constants'\n\nconst componentMap = {\n    cgid: LinkRefinements,\n    c_refinementColor: ColorRefinements,\n    c_size: SizeRefinements,\n    price: RadioRefinements\n}\n\nconst Refinements = ({filters, toggleFilter, selectedFilters, isLoading}) => {\n    // Getting the indices of filters to open accordions by default\n    let filtersIndexes = filters?.map((filter, idx) => idx)\n\n    // Use saved state for accordions\n    if (!isServer) {\n        const savedExpandedAccordionIndexes =\n            window.localStorage.getItem(FILTER_ACCORDION_SATE) &&\n            JSON.parse(window.localStorage.getItem(FILTER_ACCORDION_SATE))\n\n        if (savedExpandedAccordionIndexes) {\n            filtersIndexes = filters\n                ?.map((filter, index) => {\n                    if (savedExpandedAccordionIndexes.includes(filter.attributeId)) {\n                        return index\n                    }\n                })\n                .filter((index) => index !== undefined)\n        }\n    }\n\n    // Handle saving acccordion state\n    const updateAccordionState = (expandedIndex) => {\n        const filterState = filters\n            ?.filter((filter, index) => expandedIndex.includes(index))\n            .map((filter) => filter.attributeId)\n        window.localStorage.setItem(FILTER_ACCORDION_SATE, JSON.stringify(filterState))\n    }\n\n    return (\n        <Stack spacing={8}>\n            {/* Wait to have filters before rendering the Accordion to allow the deafult indexes to be accurate */}\n            {filtersIndexes && (\n                <Accordion\n                    pointerEvents={isLoading ? 'none' : 'auto'}\n                    onChange={updateAccordionState}\n                    opacity={isLoading ? 0.2 : 1}\n                    allowMultiple={true}\n                    defaultIndex={filtersIndexes}\n                    reduceMotion={true}\n                >\n                    {filters?.map((filter, idx) => {\n                        // Render the appropriate component for the refinement type, fallback to checkboxes\n                        const Values = componentMap[filter.attributeId] || CheckboxRefinements\n                        let selectedFiltersArray = selectedFilters?.[filter.attributeId] ?? []\n\n                        // Catch any non-array values and wrap them in an array\n                        if (!Array.isArray(selectedFiltersArray)) {\n                            selectedFiltersArray = [selectedFiltersArray]\n                        }\n\n                        if (filter.values) {\n                            return (\n                                <Stack key={filter.attributeId} divider={<Divider />}>\n                                    <AccordionItem\n                                        paddingTop={idx !== 0 ? 6 : 0}\n                                        borderBottom={\n                                            idx === filters.length - 1\n                                                ? '1px solid gray.200'\n                                                : 'none'\n                                        }\n                                        paddingBottom={6}\n                                        borderTop={idx === 0 && 'none'}\n                                    >\n                                        {({isExpanded}) => (\n                                            <>\n                                                <AccordionButton\n                                                    paddingTop={0}\n                                                    paddingBottom={isExpanded ? 2 : 0}\n                                                >\n                                                    <Text\n                                                        flex=\"1\"\n                                                        textAlign=\"left\"\n                                                        fontSize=\"md\"\n                                                        fontWeight={600}\n                                                    >\n                                                        {filter.label}\n                                                    </Text>\n                                                    <AccordionIcon />\n                                                </AccordionButton>\n                                                <AccordionPanel paddingLeft={0}>\n                                                    <Values\n                                                        selectedFilters={selectedFiltersArray}\n                                                        filter={filter}\n                                                        toggleFilter={toggleFilter}\n                                                    />\n                                                </AccordionPanel>\n                                            </>\n                                        )}\n                                    </AccordionItem>\n                                </Stack>\n                            )\n                        } else {\n                            return null\n                        }\n                    })}\n                </Accordion>\n            )}\n        </Stack>\n    )\n}\n\nRefinements.propTypes = {\n    filters: PropTypes.array,\n    toggleFilter: PropTypes.func,\n    selectedFilters: PropTypes.object,\n    isLoading: PropTypes.bool\n}\n\nexport default Refinements\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport {Box, Button, Wrap, WrapItem} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport PropTypes from 'prop-types'\nimport {CloseIcon} from '@salesforce/retail-react-app/app/components/icons'\n\nimport {FormattedMessage} from 'react-intl'\n\nconst SelectedRefinements = ({toggleFilter, selectedFilterValues, filters, handleReset}) => {\n    const priceFilterValues = filters?.find((filter) => filter.attributeId === 'price')\n\n    let selectedFilters = []\n    for (const key in selectedFilterValues) {\n        const filters = selectedFilterValues[key].split('|')\n        filters?.forEach((filter) => {\n            const selected = {\n                uiLabel:\n                    key === 'price'\n                        ? priceFilterValues?.values?.find(\n                              (priceFilter) => priceFilter.value === filter\n                          )?.label\n                        : filter,\n                value: key,\n                apiLabel: filter\n            }\n\n            if (selected.value !== 'htype' && selected.value !== 'cgid') {\n                selectedFilters.push(selected)\n            }\n        })\n    }\n\n    return (\n        <Wrap\n            direction=\"row\"\n            align=\"center\"\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            data-testid=\"sf-selected-refinements\"\n        >\n            {selectedFilters?.map((filter, idx) => {\n                return (\n                    <WrapItem key={idx}>\n                        <Box marginLeft={0} marginRight={1}>\n                            <Button\n                                marginTop={1}\n                                padding={5}\n                                color=\"black\"\n                                colorScheme=\"gray\"\n                                size=\"sm\"\n                                iconSpacing={1}\n                                rightIcon={\n                                    <CloseIcon color=\"black\" boxSize={4} mr=\"-7px\" mb=\"-6px\" />\n                                }\n                                onClick={() =>\n                                    toggleFilter({value: filter.apiLabel}, filter.value, true)\n                                }\n                            >\n                                {filter.uiLabel}\n                            </Button>\n                        </Box>\n                    </WrapItem>\n                )\n            })}\n\n            {selectedFilters?.length > 0 && (\n                <WrapItem>\n                    <Box>\n                        <Button\n                            padding={{sm: 0, base: 2}}\n                            variant=\"link\"\n                            size=\"sm\"\n                            onClick={handleReset}\n                        >\n                            <FormattedMessage\n                                defaultMessage=\"Clear All\"\n                                id=\"selected_refinements.action.clear_all\"\n                            />\n                        </Button>\n                    </Box>\n                </WrapItem>\n            )}\n        </Wrap>\n    )\n}\n\nSelectedRefinements.propTypes = {\n    filters: PropTypes.array,\n    selectedFilterValues: PropTypes.object,\n    toggleFilter: PropTypes.func,\n    handleReset: PropTypes.func\n}\n\nexport default SelectedRefinements\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {Fragment} from 'react'\nimport {\n    Button,\n    Text,\n    Flex,\n    Stack,\n    Link\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport PropTypes from 'prop-types'\nimport {Link as RouteLink} from 'react-router-dom'\nimport {defineMessage, FormattedMessage, useIntl} from 'react-intl'\nimport {SearchIcon} from '@salesforce/retail-react-app/app/components/icons'\nimport RecommendedProducts from '@salesforce/retail-react-app/app/components/recommended-products'\nimport {EINSTEIN_RECOMMENDERS} from '@salesforce/retail-react-app/app/constants'\n\nconst contactUsMessage = defineMessage({\n    id: 'empty_search_results.link.contact_us',\n    defaultMessage: 'Contact Us'\n})\n\nconst EmptySearchResults = ({searchQuery, category}) => {\n    const intl = useIntl()\n    return (\n        <Flex\n            data-testid=\"sf-product-empty-list-page\"\n            direction=\"column\"\n            alignItems=\"center\"\n            textAlign=\"center\"\n            paddingTop={28}\n            paddingBottom={28}\n        >\n            <SearchIcon boxSize={[6, 12, 12, 12]} marginBottom={5} />\n            {!searchQuery ? (\n                <Fragment>\n                    {' '}\n                    <Text fontSize={['l', 'l', 'xl', '2xl']} fontWeight=\"700\" marginBottom={2}>\n                        {intl.formatMessage(\n                            {\n                                id: 'empty_search_results.info.cant_find_anything_for_category',\n                                defaultMessage:\n                                    'We couldn’t find anything for {category}. Try searching for a product or {link}.'\n                            },\n                            {\n                                category: category.name,\n                                link: (\n                                    <Link as={RouteLink} to={'/'}>\n                                        {intl.formatMessage(contactUsMessage)}\n                                    </Link>\n                                )\n                            }\n                        )}\n                    </Text>{' '}\n                </Fragment>\n            ) : (\n                <Fragment>\n                    <Text fontSize={['lg', 'lg', 'xl', '3xl']} fontWeight=\"700\" marginBottom={2}>\n                        {intl.formatMessage(\n                            {\n                                id: 'empty_search_results.info.cant_find_anything_for_query',\n                                defaultMessage: 'We couldn’t find anything for \"{searchQuery}\".'\n                            },\n                            {\n                                searchQuery: searchQuery\n                            }\n                        )}\n                    </Text>\n                    <Text fontSize={['md', 'md', 'md', 'md']} fontWeight=\"400\">\n                        {intl.formatMessage(\n                            {\n                                id: 'empty_search_results.info.double_check_spelling',\n                                defaultMessage:\n                                    'Double-check your spelling and try again or {link}.'\n                            },\n                            {\n                                link: (\n                                    <Button variant=\"link\" to={'/'}>\n                                        {intl.formatMessage(contactUsMessage)}\n                                    </Button>\n                                )\n                            }\n                        )}\n                    </Text>\n                    <Stack spacing={16} marginTop={32}>\n                        <RecommendedProducts\n                            title={\n                                <FormattedMessage\n                                    defaultMessage=\"Top Sellers\"\n                                    id=\"empty_search_results.recommended_products.title.top_sellers\"\n                                />\n                            }\n                            recommender={EINSTEIN_RECOMMENDERS.EMPTY_SEARCH_RESULTS_TOP_SELLERS}\n                            mx={{base: -4, md: -8, lg: 0}}\n                        />\n\n                        <RecommendedProducts\n                            title={\n                                <FormattedMessage\n                                    defaultMessage=\"Most Viewed\"\n                                    id=\"empty_search_results.recommended_products.title.most_viewed\"\n                                />\n                            }\n                            recommender={EINSTEIN_RECOMMENDERS.EMPTY_SEARCH_RESULTS_MOST_VIEWED}\n                            mx={{base: -4, md: -8, lg: 0}}\n                        />\n                    </Stack>\n                </Fragment>\n            )}\n        </Flex>\n    )\n}\n\nEmptySearchResults.propTypes = {\n    searchQuery: PropTypes.string,\n    category: PropTypes.object\n}\n\nexport default EmptySearchResults\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n// Components\nimport {Box, Heading, Flex, Text, Fade} from '@salesforce/retail-react-app/app/components/shared/ui'\n\n// Project Components\nimport Breadcrumb from '@salesforce/retail-react-app/app/components/breadcrumb'\n\nconst PageHeader = ({category, productSearchResult, isLoading, searchQuery, ...otherProps}) => {\n    return (\n        <Box {...otherProps} data-testid=\"sf-product-list-breadcrumb\">\n            {/* Breadcrumb */}\n            {category && <Breadcrumb categories={category.parentCategoryTree} />}\n            {searchQuery && <Text>Search Results for</Text>}\n            {/* Category Title */}\n            <Flex>\n                <Heading as=\"h2\" size=\"lg\" marginRight={2}>\n                    {`${category?.name || searchQuery || ''}`}\n                </Heading>\n                <Heading as=\"h2\" size=\"lg\" marginRight={2}>\n                    {!isLoading && <Fade in={true}>({productSearchResult?.total})</Fade>}\n                </Heading>\n            </Flex>\n        </Box>\n    )\n}\n\nPageHeader.propTypes = {\n    category: PropTypes.object,\n    productSearchResult: PropTypes.object,\n    isLoading: PropTypes.bool,\n    searchQuery: PropTypes.string\n}\n\nexport default PageHeader\n","/*\n * Copyright (c) 2023, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nconst AbovePageHeader = () => null\n\nexport default AbovePageHeader\n","/*\n * Copyright (c) 2022, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {useHistory, useLocation, useParams} from 'react-router-dom'\nimport {FormattedMessage, useIntl} from 'react-intl'\nimport {Helmet} from 'react-helmet'\nimport {\n    useCategory,\n    useCustomerId,\n    useProductSearch,\n    useShopperCustomersMutation\n} from '@salesforce/commerce-sdk-react'\nimport {useServerContext} from '@salesforce/pwa-kit-react-sdk/ssr/universal/hooks'\n\n// Components\nimport {\n    Box,\n    Flex,\n    SimpleGrid,\n    Grid,\n    Select,\n    Text,\n    FormControl,\n    Stack,\n    useDisclosure,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    ModalContent,\n    ModalCloseButton,\n    ModalOverlay,\n    Drawer,\n    DrawerBody,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton\n} from '@salesforce/retail-react-app/app/components/shared/ui'\n\n// Project Components\nimport Pagination from '@salesforce/retail-react-app/app/components/pagination'\nimport ProductTile, {\n    Skeleton as ProductTileSkeleton\n} from '@salesforce/retail-react-app/app/components/product-tile'\nimport {HideOnDesktop} from '@salesforce/retail-react-app/app/components/responsive'\nimport Refinements from '@salesforce/retail-react-app/app/pages/product-list/partials/refinements'\nimport SelectedRefinements from '@salesforce/retail-react-app/app/pages/product-list/partials/selected-refinements'\nimport EmptySearchResults from '@salesforce/retail-react-app/app/pages/product-list/partials/empty-results'\nimport PageHeader from '@salesforce/retail-react-app/app/pages/product-list/partials/page-header'\nimport AbovePageHeader from '@salesforce/retail-react-app/app/pages/product-list/partials/above-page-header'\n\n// Icons\nimport {FilterIcon, ChevronDownIcon} from '@salesforce/retail-react-app/app/components/icons'\n\n// Hooks\nimport {\n    useLimitUrls,\n    usePageUrls,\n    useSortUrls,\n    useSearchParams\n} from '@salesforce/retail-react-app/app/hooks'\nimport {useToast} from '@salesforce/retail-react-app/app/hooks/use-toast'\n// import {parse as parseSearchParams} from '../../hooks/use-search-params'\nimport useEinstein from '@salesforce/retail-react-app/app/hooks/use-einstein'\n\n// Others\nimport {HTTPNotFound, HTTPError} from '@salesforce/pwa-kit-react-sdk/ssr/universal/errors'\n\n// Constants\nimport {\n    DEFAULT_LIMIT_VALUES,\n    API_ERROR_MESSAGE,\n    MAX_CACHE_AGE,\n    TOAST_ACTION_VIEW_WISHLIST,\n    TOAST_MESSAGE_ADDED_TO_WISHLIST,\n    TOAST_MESSAGE_REMOVED_FROM_WISHLIST\n} from '@salesforce/retail-react-app/app/constants'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport LoadingSpinner from '@salesforce/retail-react-app/app/components/loading-spinner'\nimport {useWishList} from '@salesforce/retail-react-app/app/hooks/use-wish-list'\nimport {isHydrated} from '@salesforce/retail-react-app/app/utils/utils'\n\n// NOTE: You can ignore certain refinements on a template level by updating the below\n// list of ignored refinements.\nconst REFINEMENT_DISALLOW_LIST = ['c_isNew']\n\n/*\n * This is a simple product listing page. It displays a paginated list\n * of product hit objects. Allowing for sorting and filtering based on the\n * allowable filters and sort refinements.\n */\nconst ProductList = (props) => {\n    // Using destructuring to omit properties; we must rename `isLoading` because we use a different\n    // `isLoading` later in this function.\n    // eslint-disable-next-line react/prop-types, @typescript-eslint/no-unused-vars\n    const {isLoading: _unusedIsLoading, staticContext, ...rest} = props\n    const {isOpen, onOpen, onClose} = useDisclosure()\n    const {formatMessage} = useIntl()\n    const navigate = useNavigation()\n    const history = useHistory()\n    const params = useParams()\n    const location = useLocation()\n    const toast = useToast()\n    const einstein = useEinstein()\n    const {res} = useServerContext()\n    const customerId = useCustomerId()\n    const [searchParams, {stringify: stringifySearchParams}] = useSearchParams()\n\n    /**************** Page State ****************/\n    const [filtersLoading, setFiltersLoading] = useState(false)\n    const [wishlistLoading, setWishlistLoading] = useState([])\n    const [sortOpen, setSortOpen] = useState(false)\n\n    const urlParams = new URLSearchParams(location.search)\n    let searchQuery = urlParams.get('q')\n    const isSearch = !!searchQuery\n\n    if (params.categoryId) {\n        searchParams._refine.push(`cgid=${params.categoryId}`)\n    }\n\n    /**************** Mutation Actions ****************/\n    const {mutateAsync: createCustomerProductListItem} = useShopperCustomersMutation(\n        'createCustomerProductListItem'\n    )\n    const {mutateAsync: deleteCustomerProductListItem} = useShopperCustomersMutation(\n        'deleteCustomerProductListItem'\n    )\n\n    /**************** Query Actions ****************/\n    const {\n        isLoading,\n        isRefetching,\n        data: productSearchResult\n    } = useProductSearch(\n        {\n            parameters: {\n                ...searchParams,\n                refine: searchParams._refine\n            }\n        },\n        {\n            keepPreviousData: true\n        }\n    )\n\n    const {error, data: category} = useCategory(\n        {\n            parameters: {\n                id: params.categoryId\n            }\n        },\n        {\n            enabled: !isSearch && !!params.categoryId\n        }\n    )\n\n    // Apply disallow list to refinements.\n    if (productSearchResult?.refinements) {\n        productSearchResult.refinements = productSearchResult.refinements.filter(\n            ({attributeId}) => !REFINEMENT_DISALLOW_LIST.includes(attributeId)\n        )\n    }\n\n    /**************** Error Handling ****************/\n    const errorStatus = error?.response?.status\n    switch (errorStatus) {\n        case undefined:\n            // No Error.\n            break\n        case 404:\n            throw new HTTPNotFound('Category Not Found.')\n        default:\n            throw new HTTPError(`HTTP Error ${errorStatus} occurred.`)\n    }\n\n    /**************** Response Handling ****************/\n    if (res) {\n        res.set('Cache-Control', `max-age=${MAX_CACHE_AGE}`)\n    }\n\n    // Reset scroll position when `isRefetching` becomes `true`.\n    useEffect(() => {\n        isRefetching && window.scrollTo(0, 0)\n        setFiltersLoading(isRefetching)\n    }, [isRefetching])\n\n    /**************** Render Variables ****************/\n    const basePath = `${location.pathname}${location.search}`\n    const showNoResults = !isLoading && productSearchResult && !productSearchResult?.hits\n    const {total, sortingOptions} = productSearchResult || {}\n    const selectedSortingOptionLabel =\n        sortingOptions?.find(\n            (option) => option.id === productSearchResult?.selectedSortingOption\n        ) ?? sortingOptions?.[0]\n\n    // Get urls to be used for pagination, page size changes, and sorting.\n    const pageUrls = usePageUrls({total})\n    const sortUrls = useSortUrls({options: sortingOptions})\n    const limitUrls = useLimitUrls()\n\n    /**************** Action Handlers ****************/\n    const {data: wishlist} = useWishList()\n    const addItemToWishlist = async (product) => {\n        setWishlistLoading([...wishlistLoading, product.productId])\n\n        // TODO: This wishlist object is from an old API, we need to replace it with the new one.\n        const listId = wishlist.id\n        await createCustomerProductListItem(\n            {\n                parameters: {customerId, listId},\n                body: {\n                    quantity: 1,\n                    public: false,\n                    priority: 1,\n                    type: 'product',\n                    productId: product.productId\n                }\n            },\n            {\n                onError: () => {\n                    toast({\n                        title: formatMessage(API_ERROR_MESSAGE),\n                        status: 'error'\n                    })\n                },\n                onSuccess: () => {\n                    toast({\n                        title: formatMessage(TOAST_MESSAGE_ADDED_TO_WISHLIST, {quantity: 1}),\n                        status: 'success',\n                        action: (\n                            // it would be better if we could use <Button as={Link}>\n                            // but unfortunately the Link component is not compatible\n                            // with Chakra Toast, since the ToastManager is rendered via portal\n                            // and the toast doesn't have access to intl provider, which is a\n                            // requirement of the Link component.\n                            <Button variant=\"link\" onClick={() => navigate('/account/wishlist')}>\n                                {formatMessage(TOAST_ACTION_VIEW_WISHLIST)}\n                            </Button>\n                        )\n                    })\n                },\n                onSettled: () => {\n                    setWishlistLoading(wishlistLoading.filter((id) => id !== product.productId))\n                }\n            }\n        )\n    }\n\n    const removeItemFromWishlist = async (product) => {\n        setWishlistLoading([...wishlistLoading, product.productId])\n\n        const listId = wishlist.id\n        const itemId = wishlist.customerProductListItems.find(\n            (i) => i.productId === product.productId\n        ).id\n\n        await deleteCustomerProductListItem(\n            {\n                body: {},\n                parameters: {customerId, listId, itemId}\n            },\n            {\n                onError: () => {\n                    toast({\n                        title: formatMessage(API_ERROR_MESSAGE),\n                        status: 'error'\n                    })\n                },\n                onSuccess: () => {\n                    toast({\n                        title: formatMessage(TOAST_MESSAGE_REMOVED_FROM_WISHLIST),\n                        status: 'success'\n                    })\n                },\n                onSettled: () => {\n                    setWishlistLoading(wishlistLoading.filter((id) => id !== product.productId))\n                }\n            }\n        )\n    }\n\n    // Toggles filter on and off\n    const toggleFilter = (value, attributeId, selected, allowMultiple = true) => {\n        const searchParamsCopy = {...searchParams}\n\n        // Remove the `offset` search param if present.\n        delete searchParamsCopy.offset\n\n        // If we aren't allowing for multiple selections, simply clear any value set for the\n        // attribute, and apply a new one if required.\n        if (!allowMultiple) {\n            const previousValue = searchParamsCopy.refine[attributeId]\n            delete searchParamsCopy.refine[attributeId]\n\n            // Note the loose comparison, for \"string != number\" checks.\n            if (!selected && value.value != previousValue) {\n                searchParamsCopy.refine[attributeId] = value.value\n            }\n        } else {\n            // Get the attibute value as an array.\n            let attributeValue = searchParamsCopy.refine[attributeId] || []\n\n            // Ensure that the value is still converted into an array if it's a `string` or `number`.\n            if (typeof attributeValue === 'string') {\n                attributeValue = attributeValue.split('|')\n            } else if (typeof attributeValue === 'number') {\n                attributeValue = [attributeValue]\n            }\n\n            // Either set the value, or filter the value out.\n            if (!selected) {\n                attributeValue.push(value.value)\n            } else {\n                // Note the loose comparison, for \"string != number\" checks.\n                attributeValue = attributeValue?.filter((v) => v != value.value)\n            }\n\n            // Update the attribute value in the new search params.\n            searchParamsCopy.refine[attributeId] = attributeValue\n\n            // If the update value is an empty array, remove the current attribute key.\n            if (searchParamsCopy.refine[attributeId].length === 0) {\n                delete searchParamsCopy.refine[attributeId]\n            }\n        }\n\n        if (isSearch) {\n            navigate(`/search?${stringifySearchParams(searchParamsCopy)}`)\n        } else {\n            navigate(`/category/${params.categoryId}?${stringifySearchParams(searchParamsCopy)}`)\n        }\n    }\n\n    // Clears all filters\n    const resetFilters = () => {\n        const newSearchParams = {\n            ...searchParams,\n            refine: []\n        }\n        const newPath = isSearch\n            ? `/search?${stringifySearchParams(newSearchParams)}`\n            : `/category/${params.categoryId}?${stringifySearchParams(newSearchParams)}`\n\n        navigate(newPath)\n    }\n\n    /**************** Einstein ****************/\n    useEffect(() => {\n        if (productSearchResult) {\n            isSearch\n                ? einstein.sendViewSearch(searchQuery, productSearchResult)\n                : einstein.sendViewCategory(category, productSearchResult)\n        }\n    }, [productSearchResult])\n\n    return (\n        <Box\n            className=\"sf-product-list-page\"\n            data-testid=\"sf-product-list-page\"\n            layerStyle=\"page\"\n            paddingTop={{base: 6, lg: 8}}\n            {...rest}\n        >\n            <Helmet>\n                <title>{category?.pageTitle}</title>\n                <meta name=\"description\" content={category?.pageDescription} />\n                <meta name=\"keywords\" content={category?.pageKeywords} />\n            </Helmet>\n            {showNoResults ? (\n                <EmptySearchResults searchQuery={searchQuery} category={category} />\n            ) : (\n                <>\n                    <AbovePageHeader />\n                    {/* Header */}\n                    <Stack\n                        display={{base: 'none', lg: 'flex'}}\n                        direction=\"row\"\n                        justify=\"flex-start\"\n                        align=\"flex-start\"\n                        spacing={4}\n                        marginBottom={6}\n                    >\n                        <Flex align=\"left\" width=\"287px\">\n                            <PageHeader\n                                searchQuery={searchQuery}\n                                category={category}\n                                productSearchResult={productSearchResult}\n                                isLoading={isLoading}\n                            />\n                        </Flex>\n\n                        <Box flex={1} paddingTop={'45px'}>\n                            <SelectedRefinements\n                                filters={productSearchResult?.refinements}\n                                toggleFilter={toggleFilter}\n                                handleReset={resetFilters}\n                                selectedFilterValues={productSearchResult?.selectedRefinements}\n                            />\n                        </Box>\n                        <Box paddingTop={'45px'}>\n                            <Sort\n                                sortUrls={sortUrls}\n                                productSearchResult={productSearchResult}\n                                basePath={basePath}\n                            />\n                        </Box>\n                    </Stack>\n\n                    <HideOnDesktop>\n                        <Stack spacing={6}>\n                            <PageHeader\n                                searchQuery={searchQuery}\n                                category={category}\n                                productSearchResult={productSearchResult}\n                                isLoading={isLoading}\n                            />\n                            <Stack\n                                display={{base: 'flex', md: 'none'}}\n                                direction=\"row\"\n                                justify=\"flex-start\"\n                                align=\"center\"\n                                spacing={1}\n                                height={12}\n                                borderColor=\"gray.100\"\n                            >\n                                <Flex align=\"center\">\n                                    <Button\n                                        fontSize=\"sm\"\n                                        colorScheme=\"black\"\n                                        variant=\"outline\"\n                                        marginRight={2}\n                                        display=\"inline-flex\"\n                                        leftIcon={<FilterIcon boxSize={5} />}\n                                        onClick={onOpen}\n                                    >\n                                        <FormattedMessage\n                                            defaultMessage=\"Filter\"\n                                            id=\"product_list.button.filter\"\n                                        />\n                                    </Button>\n                                </Flex>\n                                <Flex align=\"center\">\n                                    <Button\n                                        maxWidth=\"245px\"\n                                        fontSize=\"sm\"\n                                        marginRight={2}\n                                        colorScheme=\"black\"\n                                        variant=\"outline\"\n                                        display=\"inline-flex\"\n                                        rightIcon={<ChevronDownIcon boxSize={5} />}\n                                        onClick={() => setSortOpen(true)}\n                                    >\n                                        {formatMessage(\n                                            {\n                                                id: 'product_list.button.sort_by',\n                                                defaultMessage: 'Sort By: {sortOption}'\n                                            },\n                                            {\n                                                sortOption: selectedSortingOptionLabel?.label\n                                            }\n                                        )}\n                                    </Button>\n                                </Flex>\n                            </Stack>\n                        </Stack>\n                        <Box marginBottom={4}>\n                            <SelectedRefinements\n                                filters={productSearchResult?.refinements}\n                                toggleFilter={toggleFilter}\n                                handleReset={resetFilters}\n                                selectedFilterValues={productSearchResult?.selectedRefinements}\n                            />\n                        </Box>\n                    </HideOnDesktop>\n\n                    {/* Body  */}\n                    <Grid templateColumns={{base: '1fr', md: '280px 1fr'}} columnGap={6}>\n                        <Stack display={{base: 'none', md: 'flex'}}>\n                            <Refinements\n                                isLoading={filtersLoading}\n                                toggleFilter={toggleFilter}\n                                filters={productSearchResult?.refinements}\n                                selectedFilters={searchParams.refine}\n                            />\n                        </Stack>\n                        <Box>\n                            <SimpleGrid\n                                columns={[2, 2, 3, 3]}\n                                spacingX={4}\n                                spacingY={{base: 12, lg: 16}}\n                            >\n                                {isHydrated() && (isRefetching || !productSearchResult)\n                                    ? new Array(searchParams.limit)\n                                          .fill(0)\n                                          .map((value, index) => (\n                                              <ProductTileSkeleton key={index} />\n                                          ))\n                                    : productSearchResult.hits.map((productSearchItem) => {\n                                          const productId = productSearchItem.productId\n                                          const isInWishlist =\n                                              !!wishlist?.customerProductListItems?.find(\n                                                  (item) => item.productId === productId\n                                              )\n\n                                          return (\n                                              <ProductTile\n                                                  data-testid={`sf-product-tile-${productSearchItem.productId}`}\n                                                  key={productSearchItem.productId}\n                                                  product={productSearchItem}\n                                                  enableFavourite={true}\n                                                  isFavourite={isInWishlist}\n                                                  onClick={() => {\n                                                      if (searchQuery) {\n                                                          einstein.sendClickSearch(\n                                                              searchQuery,\n                                                              productSearchItem\n                                                          )\n                                                      } else if (category) {\n                                                          einstein.sendClickCategory(\n                                                              category,\n                                                              productSearchItem\n                                                          )\n                                                      }\n                                                  }}\n                                                  onFavouriteToggle={(isFavourite) => {\n                                                      const action = isFavourite\n                                                          ? addItemToWishlist\n                                                          : removeItemFromWishlist\n                                                      return action(productSearchItem)\n                                                  }}\n                                                  dynamicImageProps={{\n                                                      widths: [\n                                                          '50vw',\n                                                          '50vw',\n                                                          '20vw',\n                                                          '20vw',\n                                                          '25vw'\n                                                      ]\n                                                  }}\n                                              />\n                                          )\n                                      })}\n                            </SimpleGrid>\n                            {/* Footer */}\n                            <Flex\n                                justifyContent={['center', 'center', 'flex-start']}\n                                paddingTop={8}\n                            >\n                                <Pagination currentURL={basePath} urls={pageUrls} />\n\n                                {/*\n                            Our design doesn't call for a page size select. Show this element if you want\n                            to add one to your design.\n                        */}\n                                <Select\n                                    display=\"none\"\n                                    value={basePath}\n                                    onChange={({target}) => {\n                                        history.push(target.value)\n                                    }}\n                                >\n                                    {limitUrls.map((href, index) => (\n                                        <option key={href} value={href}>\n                                            {DEFAULT_LIMIT_VALUES[index]}\n                                        </option>\n                                    ))}\n                                </Select>\n                            </Flex>\n                        </Box>\n                    </Grid>\n                </>\n            )}\n            <Modal\n                isOpen={isOpen}\n                onClose={onClose}\n                size=\"full\"\n                motionPreset=\"slideInBottom\"\n                scrollBehavior=\"inside\"\n            >\n                <ModalOverlay />\n                <ModalContent top={0} marginTop={0}>\n                    <ModalHeader>\n                        <Text fontWeight=\"bold\" fontSize=\"2xl\">\n                            <FormattedMessage\n                                defaultMessage=\"Filter\"\n                                id=\"product_list.modal.title.filter\"\n                            />\n                        </Text>\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody py={4}>\n                        {filtersLoading && <LoadingSpinner />}\n                        <Refinements\n                            toggleFilter={toggleFilter}\n                            filters={productSearchResult?.refinements}\n                            selectedFilters={productSearchResult?.selectedRefinements}\n                        />\n                    </ModalBody>\n\n                    <ModalFooter\n                        // justify=\"space-between\"\n                        display=\"block\"\n                        width=\"full\"\n                        borderTop=\"1px solid\"\n                        borderColor=\"gray.100\"\n                        paddingBottom={10}\n                    >\n                        <Stack>\n                            <Button width=\"full\" onClick={onClose}>\n                                {formatMessage(\n                                    {\n                                        id: 'product_list.modal.button.view_items',\n                                        defaultMessage: 'View {prroductCount} items'\n                                    },\n                                    {\n                                        prroductCount: productSearchResult?.total\n                                    }\n                                )}\n                            </Button>\n                            <Button width=\"full\" variant=\"outline\" onClick={resetFilters}>\n                                <FormattedMessage\n                                    defaultMessage=\"Clear Filters\"\n                                    id=\"product_list.modal.button.clear_filters\"\n                                />\n                            </Button>\n                        </Stack>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n            <Drawer\n                placement=\"bottom\"\n                isOpen={sortOpen}\n                onClose={() => setSortOpen(false)}\n                size=\"sm\"\n                motionPreset=\"slideInBottom\"\n                scrollBehavior=\"inside\"\n                isFullHeight={false}\n                height=\"50%\"\n            >\n                <DrawerOverlay />\n                <DrawerContent marginTop={0}>\n                    <DrawerHeader boxShadow=\"none\">\n                        <Text fontWeight=\"bold\" fontSize=\"2xl\">\n                            <FormattedMessage\n                                defaultMessage=\"Sort By\"\n                                id=\"product_list.drawer.title.sort_by\"\n                            />\n                        </Text>\n                    </DrawerHeader>\n                    <DrawerCloseButton />\n                    <DrawerBody>\n                        {sortUrls.map((href, idx) => (\n                            <Button\n                                width=\"full\"\n                                onClick={() => {\n                                    setSortOpen(false)\n                                    history.push(href)\n                                }}\n                                fontSize={'md'}\n                                key={idx}\n                                marginTop={0}\n                                variant=\"menu-link\"\n                            >\n                                <Text\n                                    as={\n                                        selectedSortingOptionLabel?.label ===\n                                            productSearchResult?.sortingOptions[idx]?.label && 'u'\n                                    }\n                                >\n                                    {productSearchResult?.sortingOptions[idx]?.label}\n                                </Text>\n                            </Button>\n                        ))}\n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        </Box>\n    )\n}\n\nProductList.getTemplateName = () => 'product-list'\n\nProductList.propTypes = {\n    onAddToWishlistClick: PropTypes.func,\n    onRemoveWishlistClick: PropTypes.func,\n    category: PropTypes.object\n}\n\nexport default ProductList\n\nconst Sort = ({sortUrls, productSearchResult, basePath, ...otherProps}) => {\n    const intl = useIntl()\n    const history = useHistory()\n\n    return (\n        <FormControl data-testid=\"sf-product-list-sort\" id=\"page_sort\" width=\"auto\" {...otherProps}>\n            <Select\n                value={basePath.replace(/(offset)=(\\d+)/i, '$1=0')}\n                onChange={({target}) => {\n                    history.push(target.value)\n                }}\n                height={11}\n                width=\"240px\"\n            >\n                {sortUrls.map((href, index) => (\n                    <option key={href} value={href}>\n                        {intl.formatMessage(\n                            {\n                                id: 'product_list.select.sort_by',\n                                defaultMessage: 'Sort By: {sortOption}'\n                            },\n                            {\n                                sortOption: productSearchResult?.sortingOptions[index]?.label\n                            }\n                        )}\n                    </option>\n                ))}\n            </Select>\n        </FormControl>\n    )\n}\n\nSort.propTypes = {\n    sortUrls: PropTypes.array,\n    productSearchResult: PropTypes.object,\n    basePath: PropTypes.string\n}\n"],"names":["Breadcrumb","_ref","categories","rest","_objectWithoutProperties","_excluded","intl","useIntl","styles","useStyleConfig","React","ChakraBreadcrumb","_extends","className","container","separator","ChevronRightIcon","icon","map","category","ChakraBreadcrumbItem","key","id","ChakraBreadcrumbLink","as","RouteLink","to","categoryUrlBuilder","locale","link","name","displayName","propTypes","PropTypes","Pagination","props","history","useHistory","urls","currentURL","currentIndex","indexOf","prev","next","Flex","Button","button","href","isDisabled","variant","ChevronLeftIcon","Text","formatMessage","defaultMessage","paddingLeft","paddingRight","Select","onChange","e","push","target","value","height","index","text","numOfPages","length","isRequired","ColorRefinements","filter","toggleFilter","selectedFilters","useMultiStyleConfig","disabled","SimpleGrid","columns","spacing","mt","values","refinementValue","hitCount","idx","isSelected","includes","Box","HStack","onClick","attributeId","cursor","swatch","color","border","marginRight","marginBottom","Center","swatchButton","label","toLowerCase","width","minWidth","backgroundRepeat","backgroundSize","backgroundColor","cssColorGroups","presentationId","background","display","alignItems","fontSize","SizeRefinements","_filter$values","templateColumns","some","filterValue","borderColor","RadioRefinements","RadioGroup","Stack","Radio","base","lg","marginLeft","CheckboxRefinements","isChecked","Checkbox","LinkRefinements","Link","lineHeight","useNavLink","componentMap","cgid","c_refinementColor","c_size","price","Refinements","filters","isLoading","filtersIndexes","isServer","savedExpandedAccordionIndexes","window","localStorage","getItem","FILTER_ACCORDION_SATE","JSON","parse","undefined","Accordion","pointerEvents","expandedIndex","filterState","setItem","stringify","opacity","allowMultiple","defaultIndex","reduceMotion","Values","selectedFiltersArray","Array","isArray","divider","Divider","AccordionItem","paddingTop","borderBottom","paddingBottom","borderTop","isExpanded","AccordionButton","flex","textAlign","fontWeight","AccordionIcon","AccordionPanel","SelectedRefinements","selectedFilterValues","handleReset","priceFilterValues","find","split","forEach","_priceFilterValues$va","_priceFilterValues$va2","selected","uiLabel","priceFilter","apiLabel","Wrap","direction","align","flexWrap","WrapItem","marginTop","padding","colorScheme","size","iconSpacing","rightIcon","CloseIcon","boxSize","mr","mb","sm","FormattedMessage","contactUsMessage","defineMessage","EmptySearchResults","searchQuery","SearchIcon","Fragment","RecommendedProducts","title","recommender","EINSTEIN_RECOMMENDERS","EMPTY_SEARCH_RESULTS_TOP_SELLERS","mx","md","EMPTY_SEARCH_RESULTS_MOST_VIEWED","PageHeader","productSearchResult","otherProps","parentCategoryTree","Heading","Fade","in","total","AbovePageHeader","REFINEMENT_DISALLOW_LIST","ProductList","_error$response","_unusedIsLoading","staticContext","isOpen","onOpen","onClose","useDisclosure","navigate","useNavigation","params","useParams","location","useLocation","toast","useToast","einstein","useEinstein","res","useServerContext","customerId","useCustomerId","searchParams","stringifySearchParams","useSearchParams","filtersLoading","setFiltersLoading","useState","wishlistLoading","setWishlistLoading","sortOpen","setSortOpen","URLSearchParams","search","get","isSearch","categoryId","_refine","mutateAsync","createCustomerProductListItem","useShopperCustomersMutation","deleteCustomerProductListItem","isRefetching","data","useProductSearch","parameters","_objectSpread","refine","keepPreviousData","error","useCategory","enabled","refinements","errorStatus","response","status","HTTPNotFound","HTTPError","set","MAX_CACHE_AGE","useEffect","scrollTo","basePath","pathname","showNoResults","hits","sortingOptions","selectedSortingOptionLabel","option","selectedSortingOption","pageUrls","usePageUrls","sortUrls","useSortUrls","options","limitUrls","useLimitUrls","wishlist","useWishList","addItemToWishlist","_asyncToGenerator","product","productId","listId","body","quantity","public","priority","type","onError","API_ERROR_MESSAGE","onSuccess","TOAST_MESSAGE_ADDED_TO_WISHLIST","action","TOAST_ACTION_VIEW_WISHLIST","onSettled","_x","apply","arguments","removeItemFromWishlist","_ref2","itemId","customerProductListItems","i","TOAST_MESSAGE_REMOVED_FROM_WISHLIST","_x2","searchParamsCopy","offset","attributeValue","_attributeValue","v","previousValue","resetFilters","newSearchParams","newPath","sendViewSearch","sendViewCategory","layerStyle","Helmet","pageTitle","content","pageDescription","pageKeywords","justify","selectedRefinements","Sort","HideOnDesktop","leftIcon","FilterIcon","maxWidth","ChevronDownIcon","sortOption","Grid","columnGap","spacingX","spacingY","isHydrated","productSearchItem","_wishlist$customerPro","isInWishlist","item","ProductTile","enableFavourite","isFavourite","sendClickSearch","sendClickCategory","onFavouriteToggle","dynamicImageProps","widths","limit","fill","ProductTileSkeleton","justifyContent","DEFAULT_LIMIT_VALUES","Modal","motionPreset","scrollBehavior","ModalOverlay","ModalContent","top","ModalHeader","ModalCloseButton","ModalBody","py","LoadingSpinner","ModalFooter","prroductCount","Drawer","placement","isFullHeight","DrawerOverlay","DrawerContent","DrawerHeader","boxShadow","DrawerCloseButton","DrawerBody","_productSearchResult$","_productSearchResult$2","getTemplateName","onAddToWishlistClick","onRemoveWishlistClick","_ref3","_excluded2","FormControl","replace","_productSearchResult$3"],"sourceRoot":""}