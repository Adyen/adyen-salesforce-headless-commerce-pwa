{"version":3,"file":"pages-checkout.js","mappings":"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","sources":["webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/forms/useCreditCardFields.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/components/forms/credit-card-fields.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/checkout/partials/payment-form.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/checkout/partials/payment.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/checkout/partials/checkout-skeleton.jsx","webpack://adyen-retail-react-app/./node_modules/@salesforce/retail-react-app/app/pages/checkout/index.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport cardValidator from 'card-validator'\nimport {useIntl, defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n    required: {defaultMessage: 'Required', id: 'use_credit_card_fields.error.required'},\n    cardNumberInvalid: {\n        defaultMessage: 'Please enter a valid card number.',\n        id: 'use_credit_card_fields.error.valid_card_number'\n    },\n    nameInvalid: {\n        defaultMessage: 'Please enter a valid name.',\n        id: 'use_credit_card_fields.error.valid_name'\n    },\n    dateInvalid: {\n        defaultMessage: 'Please enter a valid date.',\n        id: 'use_credit_card_fields.error.valid_date'\n    },\n    codeInvalid: {\n        defaultMessage: 'Please enter a valid security code.',\n        id: 'use_credit_card_fields.error.valid_security_code'\n    },\n    cardNumber: {defaultMessage: 'Card Number', id: 'use_credit_card_fields.label.card_number'},\n    cardType: {defaultMessage: 'Card Type', id: 'use_credit_card_fields.label.card_type'},\n    cardName: {defaultMessage: 'Name on Card', id: 'use_credit_card_fields.label.name'},\n    expiryDate: {defaultMessage: 'Expiration Date', id: 'use_credit_card_fields.label.expiry'},\n    securityCode: {\n        defaultMessage: 'Security Code',\n        id: 'use_credit_card_fields.label.security_code'\n    }\n})\n\n/**\n * A React hook that provides the field definitions for a credit card form.\n * @param {Object} form - The object returned from `useForm`\n * @param {Object} form.control - The form control object\n * @param {Object} form.errors - An object containing field errors\n * @returns {Object} Field definitions for use in a form\n */\nexport default function useCreditCardFields({\n    form: {\n        control,\n        formState: {errors}\n    },\n    prefix = ''\n}) {\n    const {formatMessage} = useIntl()\n\n    const fields = {\n        number: {\n            name: `${prefix}number`,\n            label: formatMessage(messages.cardNumber),\n            defaultValue: '',\n            type: 'text',\n            rules: {\n                required: formatMessage({\n                    defaultMessage: 'Please enter your card number.',\n                    id: 'use_credit_card_fields.error.required_card_number'\n                }),\n                validate: (value) =>\n                    cardValidator.number(value).isValid || formatMessage(messages.cardNumberInvalid)\n            },\n            error: errors[`${prefix}number`],\n            inputProps: {\n                inputMode: 'numeric'\n            },\n            control\n        },\n        cardType: {\n            name: `${prefix}cardType`,\n            label: formatMessage(messages.cardType),\n            defaultValue: '',\n            type: 'hidden',\n            error: errors[`${prefix}cardType`],\n            control\n        },\n        holder: {\n            name: `${prefix}holder`,\n            label: formatMessage(messages.cardName),\n            defaultValue: '',\n            type: 'text',\n            rules: {\n                required: formatMessage({\n                    defaultMessage: 'Please enter your name as shown on your card.',\n                    id: 'use_credit_card_fields.error.required_name'\n                }),\n                validate: (value) =>\n                    cardValidator.cardholderName(value).isValid ||\n                    formatMessage(messages.nameInvalid)\n            },\n            error: errors[`${prefix}holder`],\n            control\n        },\n        expiry: {\n            name: `${prefix}expiry`,\n            label: formatMessage(messages.expiryDate),\n            defaultValue: '',\n            type: 'text',\n            placeholder: 'MM/YY',\n            rules: {\n                required: formatMessage({\n                    defaultMessage: 'Please enter your expiration date.',\n                    id: 'use_credit_card_fields.error.required_expiry'\n                }),\n                validate: (value) =>\n                    cardValidator.expirationDate(value).isValid ||\n                    formatMessage(messages.dateInvalid)\n            },\n            error: errors[`${prefix}expiry`],\n            inputProps: {\n                inputMode: 'numeric'\n            },\n            control\n        },\n        securityCode: {\n            name: `${prefix}securityCode`,\n            label: formatMessage(messages.securityCode),\n            defaultValue: '',\n            type: 'password',\n            rules: {\n                required: formatMessage({\n                    defaultMessage: 'Please enter your security code.',\n                    id: 'use_credit_card_fields.error.required_security_code'\n                }),\n                validate: (value) =>\n                    cardValidator.cvv(value).isValid || formatMessage(messages.codeInvalid)\n            },\n            error: errors[`${prefix}securityCode`],\n            inputProps: ({onChange}) => ({\n                inputMode: 'numeric',\n                maxLength: 4,\n                onChange(evt) {\n                    onChange(evt.target.value.replace(/[^0-9 ]+/, ''))\n                }\n            }),\n            control\n        }\n    }\n\n    return fields\n}\n","/*\n * Copyright (c) 2022, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport ccValidator from 'card-validator'\nimport {useIntl} from 'react-intl'\nimport {\n    Box,\n    Flex,\n    FormLabel,\n    InputRightElement,\n    SimpleGrid,\n    Stack,\n    Tooltip\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {\n    formatCreditCardNumber,\n    getCreditCardIcon\n} from '@salesforce/retail-react-app/app/utils/cc-utils'\nimport useCreditCardFields from '@salesforce/retail-react-app/app/components/forms/useCreditCardFields'\nimport Field from '@salesforce/retail-react-app/app/components/field'\nimport {\n    AmexIcon,\n    DiscoverIcon,\n    MastercardIcon,\n    VisaIcon,\n    InfoIcon\n} from '@salesforce/retail-react-app/app/components/icons'\n\nconst CreditCardFields = ({form, prefix = ''}) => {\n    const {formatMessage} = useIntl()\n    const fields = useCreditCardFields({form, prefix})\n\n    // Rerender the fields when we `cardType` changes so the detected\n    // card icon appears while typing the card number.\n    // https://react-hook-form.com/api#watch\n    const cardType = form.watch('cardType')\n\n    const CardIcon = getCreditCardIcon(form.getValues().cardType)\n\n    // Note: The ternary should NOT be placed inside a call to `formatMessage`. The message\n    // extraction script (`npm run extract-default-translations`) only works when `formatMessage` is\n    // used with object literals.\n    const securityCodeTooltipLabel =\n        cardType === 'american-express'\n            ? formatMessage({\n                  id: 'credit_card_fields.tool_tip.security_code.american_express',\n                  defaultMessage: 'This 4-digit code can be found on the front of your card.',\n                  description: 'American Express security code help text'\n              })\n            : formatMessage({\n                  id: 'credit_card_fields.tool_tip.security_code',\n                  defaultMessage: 'This 3-digit code can be found on the back of your card.',\n                  description: 'Generic credit card security code help text'\n              })\n\n    return (\n        <Box>\n            <Stack spacing={5}>\n                <Field\n                    {...fields.number}\n                    formLabel={\n                        <Flex justify=\"space-between\">\n                            <FormLabel>{fields.number.label}</FormLabel>\n                            <Stack direction=\"row\" spacing={1}>\n                                <VisaIcon layerStyle=\"ccIcon\" />\n                                <MastercardIcon layerStyle=\"ccIcon\" />\n                                <AmexIcon layerStyle=\"ccIcon\" />\n                                <DiscoverIcon layerStyle=\"ccIcon\" />\n                            </Stack>\n                        </Flex>\n                    }\n                    inputProps={({onChange}) => ({\n                        ...fields.number.inputProps,\n                        onChange(evt) {\n                            const number = evt.target.value.replace(/[^0-9 ]+/, '')\n                            const {card} = ccValidator.number(number)\n                            const formattedNumber = card\n                                ? formatCreditCardNumber(number, card)\n                                : number\n                            form.setValue('cardType', card?.type || '')\n                            return onChange(formattedNumber)\n                        }\n                    })}\n                >\n                    {CardIcon && form.getValues().number?.length > 2 && (\n                        <InputRightElement width=\"60px\">\n                            <CardIcon layerStyle=\"ccIcon\" />\n                        </InputRightElement>\n                    )}\n                </Field>\n\n                <Field {...fields.holder} />\n\n                <SimpleGrid columns={[2, 2, 3]} spacing={5}>\n                    <Field\n                        {...fields.expiry}\n                        inputProps={({onChange}) => ({\n                            ...fields.expiry.inputProps,\n                            onChange(evt) {\n                                let value = evt.target.value.replace('/', '')\n\n                                // We ignore input values other than digits and `/`.\n                                if (value.match(/[^\\d|/]/g)) {\n                                    return\n                                }\n\n                                // Ignore input when we already have MM/YY\n                                if (value.length > 4) {\n                                    return\n                                }\n                                if (value.length >= 2) {\n                                    value = `${value.substr(0, 2)}/${value.substr(2)}`\n                                }\n\n                                return onChange(value)\n                            },\n                            onKeyDown(evt) {\n                                if (evt.keyCode === 8 || evt.keyCode === 46) {\n                                    evt.preventDefault()\n                                    return onChange(evt.target.value.slice(0, -1))\n                                }\n                            }\n                        })}\n                    />\n\n                    <Field\n                        {...fields.securityCode}\n                        formLabel={\n                            <FormLabel>\n                                {fields.securityCode.label}{' '}\n                                <Tooltip hasArrow placement=\"top\" label={securityCodeTooltipLabel}>\n                                    <InfoIcon boxSize={5} color=\"gray.700\" ml={1} />\n                                </Tooltip>\n                            </FormLabel>\n                        }\n                    />\n                </SimpleGrid>\n            </Stack>\n            <Field {...fields.cardType} />\n        </Box>\n    )\n}\n\nCreditCardFields.propTypes = {\n    /** Object returned from `useForm` */\n    form: PropTypes.object.isRequired,\n\n    /** Optional prefix for field names */\n    prefix: PropTypes.string\n}\n\nexport default CreditCardFields\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport {FormattedMessage, FormattedNumber, useIntl} from 'react-intl'\nimport PropTypes from 'prop-types'\nimport {\n    Box,\n    Flex,\n    Radio,\n    RadioGroup,\n    Stack,\n    Text,\n    Tooltip\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {useCurrentBasket} from '@salesforce/retail-react-app/app/hooks/use-current-basket'\nimport {LockIcon, PaypalIcon} from '@salesforce/retail-react-app/app/components/icons'\nimport CreditCardFields from '@salesforce/retail-react-app/app/components/forms/credit-card-fields'\nimport {useCurrency} from '@salesforce/retail-react-app/app/hooks'\n\nconst PaymentForm = ({form, onSubmit}) => {\n    const {formatMessage} = useIntl()\n    const {data: basket} = useCurrentBasket()\n    const {currency} = useCurrency()\n\n    return (\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n            <Stack spacing={8}>\n                <Stack spacing={5}>\n                    <Box border=\"1px solid\" borderColor=\"gray.100\" rounded=\"base\" overflow=\"hidden\">\n                        <RadioGroup value=\"cc\">\n                            <Box\n                                py={3}\n                                px={[4, 4, 6]}\n                                bg=\"gray.50\"\n                                borderBottom=\"1px solid\"\n                                borderColor=\"gray.100\"\n                            >\n                                <Radio value=\"cc\">\n                                    <Flex justify=\"space-between\">\n                                        <Stack direction=\"row\" align=\"center\">\n                                            <Text fontWeight=\"bold\">\n                                                <FormattedMessage\n                                                    defaultMessage=\"Credit Card\"\n                                                    id=\"payment_selection.heading.credit_card\"\n                                                />\n                                            </Text>\n                                            <Tooltip\n                                                hasArrow\n                                                placement=\"top\"\n                                                label={formatMessage({\n                                                    defaultMessage:\n                                                        'This is a secure SSL encrypted payment.',\n                                                    id: 'payment_selection.tooltip.secure_payment'\n                                                })}\n                                            >\n                                                <LockIcon color=\"gray.700\" boxSize={5} />\n                                            </Tooltip>\n                                        </Stack>\n                                        <Text fontWeight=\"bold\">\n                                            <FormattedNumber\n                                                value={basket?.orderTotal}\n                                                style=\"currency\"\n                                                currency={currency}\n                                            />\n                                        </Text>\n                                    </Flex>\n                                </Radio>\n                            </Box>\n\n                            <Box p={[4, 4, 6]} borderBottom=\"1px solid\" borderColor=\"gray.100\">\n                                <Stack spacing={6}>\n                                    <Stack spacing={6}>\n                                        <CreditCardFields form={form} />\n                                    </Stack>\n                                </Stack>\n                            </Box>\n\n                            <Box py={3} px={[4, 4, 6]} bg=\"gray.50\" borderColor=\"gray.100\">\n                                <Radio value=\"paypal\">\n                                    <Box py=\"2px\">\n                                        <PaypalIcon width=\"auto\" height=\"20px\" />\n                                    </Box>\n                                </Radio>\n                            </Box>\n                        </RadioGroup>\n                    </Box>\n                </Stack>\n            </Stack>\n        </form>\n    )\n}\n\nPaymentForm.propTypes = {\n    /** The form object returned from `useForm` */\n    form: PropTypes.object,\n\n    /** Callback for form submit */\n    onSubmit: PropTypes.func\n}\n\nexport default PaymentForm\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {FormattedMessage, useIntl} from 'react-intl'\nimport {\n    Box,\n    Button,\n    Checkbox,\n    Container,\n    Heading,\n    Stack,\n    Text,\n    Divider\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {useForm} from 'react-hook-form'\nimport {useToast} from '@salesforce/retail-react-app/app/hooks/use-toast'\nimport {useShopperBasketsMutation} from '@salesforce/commerce-sdk-react'\nimport {useCurrentBasket} from '@salesforce/retail-react-app/app/hooks/use-current-basket'\nimport {useCheckout} from '@salesforce/retail-react-app/app/pages/checkout/util/checkout-context'\nimport {\n    getPaymentInstrumentCardType,\n    getMaskCreditCardNumber,\n    getCreditCardIcon\n} from '@salesforce/retail-react-app/app/utils/cc-utils'\nimport {\n    ToggleCard,\n    ToggleCardEdit,\n    ToggleCardSummary\n} from '@salesforce/retail-react-app/app/components/toggle-card'\nimport PaymentForm from '@salesforce/retail-react-app/app/pages/checkout/partials/payment-form'\nimport ShippingAddressSelection from '@salesforce/retail-react-app/app/pages/checkout/partials/shipping-address-selection'\nimport AddressDisplay from '@salesforce/retail-react-app/app/components/address-display'\nimport {PromoCode, usePromoCode} from '@salesforce/retail-react-app/app/components/promo-code'\nimport {API_ERROR_MESSAGE} from '@salesforce/retail-react-app/app/constants'\n\nconst Payment = () => {\n    const {formatMessage} = useIntl()\n    const {data: basket} = useCurrentBasket()\n    const selectedShippingAddress = basket?.shipments && basket?.shipments[0]?.shippingAddress\n    const selectedBillingAddress = basket?.billingAddress\n    const appliedPayment = basket?.paymentInstruments && basket?.paymentInstruments[0]\n    const [billingSameAsShipping, setBillingSameAsShipping] = useState(true) // By default, have billing addr to be the same as shipping\n    const {mutateAsync: addPaymentInstrumentToBasket} = useShopperBasketsMutation(\n        'addPaymentInstrumentToBasket'\n    )\n    const {mutateAsync: updateBillingAddressForBasket} = useShopperBasketsMutation(\n        'updateBillingAddressForBasket'\n    )\n    const {mutateAsync: removePaymentInstrumentFromBasket} = useShopperBasketsMutation(\n        'removePaymentInstrumentFromBasket'\n    )\n    const showToast = useToast()\n    const showError = () => {\n        showToast({\n            title: formatMessage(API_ERROR_MESSAGE),\n            status: 'error'\n        })\n    }\n\n    const {step, STEPS, goToStep, goToNextStep} = useCheckout()\n\n    const billingAddressForm = useForm({\n        mode: 'onChange',\n        shouldUnregister: false,\n        defaultValues: {...selectedBillingAddress}\n    })\n\n    // Using destructuring to remove properties from the object...\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {removePromoCode, ...promoCodeProps} = usePromoCode()\n\n    const paymentMethodForm = useForm()\n\n    const onPaymentSubmit = async (formValue) => {\n        // The form gives us the expiration date as `MM/YY` - so we need to split it into\n        // month and year to submit them as individual fields.\n        const [expirationMonth, expirationYear] = formValue.expiry.split('/')\n\n        const paymentInstrument = {\n            paymentMethodId: 'CREDIT_CARD',\n            paymentCard: {\n                holder: formValue.holder,\n                maskedNumber: getMaskCreditCardNumber(formValue.number),\n                cardType: getPaymentInstrumentCardType(formValue.cardType),\n                expirationMonth: parseInt(expirationMonth),\n                expirationYear: parseInt(`20${expirationYear}`)\n            }\n        }\n\n        return addPaymentInstrumentToBasket({\n            parameters: {basketId: basket?.basketId},\n            body: paymentInstrument\n        })\n    }\n    const onBillingSubmit = async () => {\n        const isFormValid = await billingAddressForm.trigger()\n\n        if (!isFormValid) {\n            return\n        }\n        const billingAddress = billingSameAsShipping\n            ? selectedShippingAddress\n            : billingAddressForm.getValues()\n        // Using destructuring to remove properties from the object...\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {addressId, creationDate, lastModified, preferred, ...address} = billingAddress\n        return updateBillingAddressForBasket({\n            body: address,\n            parameters: {basketId: basket.basketId, shipmentId: 'me'}\n        })\n    }\n    const onPaymentRemoval = async () => {\n        try {\n            await removePaymentInstrumentFromBasket({\n                parameters: {\n                    basketId: basket.basketId,\n                    paymentInstrumentId: appliedPayment.paymentInstrumentId\n                }\n            })\n        } catch (e) {\n            showError()\n        }\n    }\n\n    const onSubmit = paymentMethodForm.handleSubmit(async (paymentFormValues) => {\n        if (!appliedPayment) {\n            await onPaymentSubmit(paymentFormValues)\n        }\n        await onBillingSubmit()\n        goToNextStep()\n    })\n\n    return (\n        <ToggleCard\n            id=\"step-3\"\n            title={formatMessage({defaultMessage: 'Payment', id: 'checkout_payment.title.payment'})}\n            editing={step === STEPS.PAYMENT}\n            isLoading={\n                paymentMethodForm.formState.isSubmitting ||\n                billingAddressForm.formState.isSubmitting\n            }\n            disabled={appliedPayment == null}\n            onEdit={() => goToStep(STEPS.PAYMENT)}\n        >\n            <ToggleCardEdit>\n                <Box mt={-2} mb={4}>\n                    <PromoCode {...promoCodeProps} itemProps={{border: 'none'}} />\n                </Box>\n\n                <Stack spacing={6}>\n                    {!appliedPayment?.paymentCard ? (\n                        <PaymentForm form={paymentMethodForm} onSubmit={onPaymentSubmit} />\n                    ) : (\n                        <Stack spacing={3}>\n                            <Heading as=\"h3\" fontSize=\"md\">\n                                <FormattedMessage\n                                    defaultMessage=\"Credit Card\"\n                                    id=\"checkout_payment.heading.credit_card\"\n                                />\n                            </Heading>\n                            <Stack direction=\"row\" spacing={4}>\n                                <PaymentCardSummary payment={appliedPayment} />\n                                <Button\n                                    variant=\"link\"\n                                    size=\"sm\"\n                                    colorScheme=\"red\"\n                                    onClick={onPaymentRemoval}\n                                >\n                                    <FormattedMessage\n                                        defaultMessage=\"Remove\"\n                                        id=\"checkout_payment.action.remove\"\n                                    />\n                                </Button>\n                            </Stack>\n                        </Stack>\n                    )}\n\n                    <Divider borderColor=\"gray.100\" />\n\n                    <Stack spacing={2}>\n                        <Heading as=\"h3\" fontSize=\"md\">\n                            <FormattedMessage\n                                defaultMessage=\"Billing Address\"\n                                id=\"checkout_payment.heading.billing_address\"\n                            />\n                        </Heading>\n\n                        <Checkbox\n                            name=\"billingSameAsShipping\"\n                            isChecked={billingSameAsShipping}\n                            onChange={(e) => setBillingSameAsShipping(e.target.checked)}\n                        >\n                            <Text fontSize=\"sm\" color=\"gray.700\">\n                                <FormattedMessage\n                                    defaultMessage=\"Same as shipping address\"\n                                    id=\"checkout_payment.label.same_as_shipping\"\n                                />\n                            </Text>\n                        </Checkbox>\n\n                        {billingSameAsShipping && selectedShippingAddress && (\n                            <Box pl={7}>\n                                <AddressDisplay address={selectedShippingAddress} />\n                            </Box>\n                        )}\n                    </Stack>\n\n                    {!billingSameAsShipping && (\n                        <ShippingAddressSelection\n                            form={billingAddressForm}\n                            selectedAddress={selectedBillingAddress}\n                            hideSubmitButton\n                        />\n                    )}\n\n                    <Box pt={3}>\n                        <Container variant=\"form\">\n                            <Button w=\"full\" onClick={onSubmit}>\n                                <FormattedMessage\n                                    defaultMessage=\"Review Order\"\n                                    id=\"checkout_payment.button.review_order\"\n                                />\n                            </Button>\n                        </Container>\n                    </Box>\n                </Stack>\n            </ToggleCardEdit>\n\n            <ToggleCardSummary>\n                <Stack spacing={6}>\n                    {appliedPayment && (\n                        <Stack spacing={3}>\n                            <Heading as=\"h3\" fontSize=\"md\">\n                                <FormattedMessage\n                                    defaultMessage=\"Credit Card\"\n                                    id=\"checkout_payment.heading.credit_card\"\n                                />\n                            </Heading>\n                            <PaymentCardSummary payment={appliedPayment} />\n                        </Stack>\n                    )}\n\n                    <Divider borderColor=\"gray.100\" />\n\n                    {selectedBillingAddress && (\n                        <Stack spacing={2}>\n                            <Heading as=\"h3\" fontSize=\"md\">\n                                <FormattedMessage\n                                    defaultMessage=\"Billing Address\"\n                                    id=\"checkout_payment.heading.billing_address\"\n                                />\n                            </Heading>\n                            <AddressDisplay address={selectedBillingAddress} />\n                        </Stack>\n                    )}\n                </Stack>\n            </ToggleCardSummary>\n        </ToggleCard>\n    )\n}\n\nconst PaymentCardSummary = ({payment}) => {\n    const CardIcon = getCreditCardIcon(payment?.paymentCard?.cardType)\n    return (\n        <Stack direction=\"row\" alignItems=\"center\" spacing={3}>\n            {CardIcon && <CardIcon layerStyle=\"ccIcon\" />}\n\n            <Stack direction=\"row\">\n                <Text>{payment.paymentCard.cardType}</Text>\n                <Text>&bull;&bull;&bull;&bull; {payment.paymentCard.numberLastDigits}</Text>\n                <Text>\n                    {payment.paymentCard.expirationMonth}/{payment.paymentCard.expirationYear}\n                </Text>\n            </Stack>\n        </Stack>\n    )\n}\n\nPaymentCardSummary.propTypes = {payment: PropTypes.object}\n\nexport default Payment\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport {\n    Box,\n    Container,\n    Grid,\n    GridItem,\n    Skeleton,\n    Stack\n} from '@salesforce/retail-react-app/app/components/shared/ui'\n\nconst CheckoutSkeleton = () => {\n    return (\n        <Box background=\"gray.50\" flex=\"1\">\n            <Container\n                data-testid=\"sf-checkout-skeleton\"\n                maxWidth=\"container.xl\"\n                py={{base: 7, lg: 16}}\n                px={{base: 0, lg: 4}}\n            >\n                <Grid templateColumns={{base: '1fr', lg: '66% 1fr'}} gap={{base: 10, lg: 20}}>\n                    <GridItem>\n                        <Stack spacing={4}>\n                            <Skeleton height=\"78px\" />\n                            <Skeleton height=\"78px\" />\n                            <Skeleton height=\"78px\" />\n                            <Skeleton height=\"78px\" />\n                        </Stack>\n                    </GridItem>\n\n                    <GridItem py={6} px={[4, 4, 0]}>\n                        <Stack spacing={5}>\n                            <Skeleton height=\"30px\" width=\"50%\" />\n\n                            <Stack spacing={5}>\n                                <Skeleton height=\"30px\" width=\"65%\" />\n\n                                <Stack w=\"full\" py={4} borderY=\"1px\" borderColor=\"gray.200\">\n                                    <Skeleton height={6} />\n                                    <Skeleton height={6} />\n                                    <Skeleton height={6} />\n                                </Stack>\n\n                                <Skeleton height={6} />\n                            </Stack>\n                        </Stack>\n                    </GridItem>\n                </Grid>\n            </Container>\n        </Box>\n    )\n}\n\nexport default CheckoutSkeleton\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {useEffect, useState} from 'react'\nimport {FormattedMessage, useIntl} from 'react-intl'\nimport {\n    Alert,\n    AlertIcon,\n    Box,\n    Button,\n    Container,\n    Grid,\n    GridItem,\n    Stack\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport {\n    CheckoutProvider,\n    useCheckout\n} from '@salesforce/retail-react-app/app/pages/checkout/util/checkout-context'\nimport ContactInfo from '@salesforce/retail-react-app/app/pages/checkout/partials/contact-info'\nimport ShippingAddress from '@salesforce/retail-react-app/app/pages/checkout/partials/shipping-address'\nimport ShippingOptions from '@salesforce/retail-react-app/app/pages/checkout/partials/shipping-options'\nimport Payment from '@salesforce/retail-react-app/app/pages/checkout/partials/payment'\nimport OrderSummary from '@salesforce/retail-react-app/app/components/order-summary'\nimport {useCurrentCustomer} from '@salesforce/retail-react-app/app/hooks/use-current-customer'\nimport {useCurrentBasket} from '@salesforce/retail-react-app/app/hooks/use-current-basket'\nimport CheckoutSkeleton from '@salesforce/retail-react-app/app/pages/checkout/partials/checkout-skeleton'\nimport {useUsid, useShopperOrdersMutation} from '@salesforce/commerce-sdk-react'\n\nconst Checkout = () => {\n    const {formatMessage} = useIntl()\n    const navigate = useNavigation()\n    const {usid} = useUsid()\n    const {step} = useCheckout()\n    const [error, setError] = useState()\n    const {data: basket} = useCurrentBasket()\n    const [isLoading, setIsLoading] = useState(false)\n    const {mutateAsync: createOrder} = useShopperOrdersMutation('createOrder')\n\n    useEffect(() => {\n        if (error || step === 4) {\n            window.scrollTo({top: 0})\n        }\n    }, [error, step])\n\n    const submitOrder = async () => {\n        setIsLoading(true)\n        try {\n            const order = await createOrder({\n                // We send the SLAS usid via this header. This is required by ECOM to map\n                // Einstein events sent via the API with the finishOrder event fired by ECOM\n                // when an Order transitions from Created to New status.\n                // Without this, various order conversion metrics will not appear on reports and dashboards\n                headers: {_sfdc_customer_id: usid},\n                body: {basketId: basket.basketId}\n            })\n            navigate(`/checkout/confirmation/${order.orderNo}`)\n        } catch (error) {\n            const message = formatMessage({\n                id: 'checkout.message.generic_error',\n                defaultMessage: 'An unexpected error occurred during checkout.'\n            })\n            setError(message)\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <Box background=\"gray.50\" flex=\"1\">\n            <Container\n                data-testid=\"sf-checkout-container\"\n                maxWidth=\"container.xl\"\n                py={{base: 7, lg: 16}}\n                px={{base: 0, lg: 8}}\n            >\n                <Grid templateColumns={{base: '1fr', lg: '66% 1fr'}} gap={{base: 10, xl: 20}}>\n                    <GridItem>\n                        <Stack spacing={4}>\n                            {error && (\n                                <Alert status=\"error\" variant=\"left-accent\">\n                                    <AlertIcon />\n                                    {error}\n                                </Alert>\n                            )}\n\n                            <ContactInfo />\n                            <ShippingAddress />\n                            <ShippingOptions />\n                            <Payment />\n\n                            {step === 4 && (\n                                <Box pt={3} display={{base: 'none', lg: 'block'}}>\n                                    <Container variant=\"form\">\n                                        <Button\n                                            w=\"full\"\n                                            onClick={submitOrder}\n                                            isLoading={isLoading}\n                                            data-testid=\"sf-checkout-place-order-btn\"\n                                        >\n                                            <FormattedMessage\n                                                defaultMessage=\"Place Order\"\n                                                id=\"checkout.button.place_order\"\n                                            />\n                                        </Button>\n                                    </Container>\n                                </Box>\n                            )}\n                        </Stack>\n                    </GridItem>\n\n                    <GridItem py={6} px={[4, 4, 4, 0]}>\n                        <OrderSummary\n                            basket={basket}\n                            showTaxEstimationForm={false}\n                            showCartItems={true}\n                        />\n\n                        {step === 4 && (\n                            <Box display={{base: 'none', lg: 'block'}} pt={2}>\n                                <Button w=\"full\" onClick={submitOrder} isLoading={isLoading}>\n                                    <FormattedMessage\n                                        defaultMessage=\"Place Order\"\n                                        id=\"checkout.button.place_order\"\n                                    />\n                                </Button>\n                            </Box>\n                        )}\n                    </GridItem>\n                </Grid>\n            </Container>\n\n            {step === 4 && (\n                <Box\n                    display={{lg: 'none'}}\n                    position=\"sticky\"\n                    bottom=\"0\"\n                    px={4}\n                    pt={6}\n                    pb={11}\n                    background=\"white\"\n                    borderTop=\"1px solid\"\n                    borderColor=\"gray.100\"\n                >\n                    <Container variant=\"form\">\n                        <Button w=\"full\" onClick={submitOrder} isLoading={isLoading}>\n                            <FormattedMessage\n                                defaultMessage=\"Place Order\"\n                                id=\"checkout.button.place_order\"\n                            />\n                        </Button>\n                    </Container>\n                </Box>\n            )}\n        </Box>\n    )\n}\n\nconst CheckoutContainer = () => {\n    const {data: customer} = useCurrentCustomer()\n    const {data: basket} = useCurrentBasket()\n\n    if (!customer || !customer.customerId || !basket || !basket.basketId) {\n        return <CheckoutSkeleton />\n    }\n\n    return (\n        <CheckoutProvider>\n            <Checkout />\n        </CheckoutProvider>\n    )\n}\n\nexport default CheckoutContainer\n"],"names":["messages","defineMessages","required","defaultMessage","id","cardNumberInvalid","nameInvalid","dateInvalid","codeInvalid","cardNumber","cardType","cardName","expiryDate","securityCode","CreditCardFields","form","prefix","_form$getValues$numbe","formatMessage","useIntl","fields","control","formState","errors","number","name","label","defaultValue","type","rules","validate","value","cardValidator","isValid","error","inputProps","inputMode","holder","expiry","placeholder","onChange","maxLength","evt","target","replace","useCreditCardFields","watch","CardIcon","getCreditCardIcon","getValues","securityCodeTooltipLabel","React","Box","Stack","spacing","Field","_extends","formLabel","Flex","justify","FormLabel","direction","VisaIcon","layerStyle","MastercardIcon","AmexIcon","DiscoverIcon","_objectSpread","card","ccValidator","formattedNumber","formatCreditCardNumber","setValue","length","InputRightElement","width","SimpleGrid","columns","match","substr","onKeyDown","keyCode","preventDefault","slice","Tooltip","hasArrow","placement","InfoIcon","boxSize","color","ml","propTypes","PropTypes","isRequired","PaymentForm","onSubmit","data","basket","useCurrentBasket","currency","useCurrency","handleSubmit","border","borderColor","rounded","overflow","RadioGroup","py","px","bg","borderBottom","Radio","align","Text","fontWeight","FormattedMessage","LockIcon","FormattedNumber","orderTotal","style","p","PaypalIcon","height","PaymentCardSummary","payment","_payment$paymentCard","paymentCard","alignItems","numberLastDigits","expirationMonth","expirationYear","Payment","_basket$shipments$","selectedShippingAddress","shipments","shippingAddress","selectedBillingAddress","billingAddress","appliedPayment","paymentInstruments","billingSameAsShipping","setBillingSameAsShipping","useState","mutateAsync","addPaymentInstrumentToBasket","useShopperBasketsMutation","updateBillingAddressForBasket","removePaymentInstrumentFromBasket","showToast","useToast","step","STEPS","goToStep","goToNextStep","useCheckout","billingAddressForm","useForm","mode","shouldUnregister","defaultValues","_usePromoCode","usePromoCode","removePromoCode","promoCodeProps","_objectWithoutProperties","_excluded","paymentMethodForm","onPaymentSubmit","_ref","_asyncToGenerator","formValue","split","paymentInstrument","paymentMethodId","maskedNumber","getMaskCreditCardNumber","getPaymentInstrumentCardType","parseInt","parameters","basketId","body","_x","apply","arguments","onBillingSubmit","_ref2","trigger","addressId","creationDate","lastModified","preferred","address","_excluded2","shipmentId","onPaymentRemoval","_ref3","paymentInstrumentId","e","title","API_ERROR_MESSAGE","status","_ref4","paymentFormValues","_x2","ToggleCard","editing","PAYMENT","isLoading","isSubmitting","disabled","onEdit","ToggleCardEdit","mt","mb","PromoCode","itemProps","Heading","as","fontSize","Button","variant","size","colorScheme","onClick","Divider","Checkbox","isChecked","checked","pl","AddressDisplay","ShippingAddressSelection","selectedAddress","hideSubmitButton","pt","Container","w","ToggleCardSummary","CheckoutSkeleton","background","flex","maxWidth","base","lg","Grid","templateColumns","gap","GridItem","Skeleton","borderY","Checkout","navigate","useNavigation","usid","useUsid","setError","setIsLoading","createOrder","useShopperOrdersMutation","useEffect","window","scrollTo","top","submitOrder","order","headers","_sfdc_customer_id","orderNo","message","xl","Alert","AlertIcon","ContactInfo","ShippingAddress","ShippingOptions","display","OrderSummary","showTaxEstimationForm","showCartItems","position","bottom","pb","borderTop","CheckoutContainer","customer","useCurrentCustomer","customerId","CheckoutProvider"],"sourceRoot":""}